#!/usr/bin/env node

/**
 * TESTE CR√çTICO: Valida√ß√£o das corre√ß√µes de busca por "altura"
 * 
 * Este script testa:
 * 1. Busca fuzzy implementada
 * 2. Sin√¥nimos de altura funcionando
 * 3. Embeddings reais do OpenAI
 * 4. Melhorias no sistema de RAG
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Queries de teste para altura com diferentes sin√¥nimos
const alturaTestQueries = [
  'qual a altura m√°xima permitida?',
  'gabarito m√°ximo em porto alegre',
  'limite de altura das edifica√ß√µes',
  'eleva√ß√£o m√°xima dos pr√©dios',
  'quantos metros de altura posso construir?',
  'altura da constru√ß√£o permitida',
  'cota m√°xima das edifica√ß√µes',
  'n√≠vel m√°ximo de constru√ß√£o',
  'altura do pr√©dio m√°xima',
  'teto de altura para edifica√ß√µes'
];

async function testEmbeddingGeneration(query) {
  console.log(`\nüß™ Testando gera√ß√£o de embedding para: "${query}"`);
  
  try {
    const { data, error } = await supabase.functions.invoke('generate-text-embedding', {
      body: { 
        text: query,
        model: "text-embedding-3-small"
      }
    });

    if (error) {
      console.error('‚ùå Erro na gera√ß√£o de embedding:', error);
      return false;
    }

    if (!data?.embedding) {
      console.error('‚ùå Resposta inv√°lida - sem embedding');
      return false;
    }

    console.log('‚úÖ Embedding gerado com sucesso');
    console.log(`üìä Dimens√µes: ${data.dimensions}`);
    console.log(`üîß Busca fuzzy aplicada: ${data.processingInfo?.fuzzySearchApplied}`);
    console.log(`üìù Melhorado com sin√¥nimos: ${data.processingInfo?.enhancedWithSynonyms}`);
    
    return data.embedding;
    
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error);
    return false;
  }
}

async function testVectorSearch(query) {
  console.log(`\nüîç Testando busca vetorial para: "${query}"`);
  
  try {
    const { data, error } = await supabase.functions.invoke('enhanced-vector-search', {
      body: { 
        message: query,
        userRole: 'citizen'
      }
    });

    if (error) {
      console.error('‚ùå Erro na busca vetorial:', error);
      return false;
    }

    console.log('‚úÖ Busca vetorial executada');
    console.log(`üìù Matches encontrados: ${data.matches?.length || 0}`);
    
    if (data.matches && data.matches.length > 0) {
      console.log('üìã Primeiros matches:');
      data.matches.slice(0, 3).forEach((match, idx) => {
        console.log(`  ${idx + 1}. Score: ${match.similarity?.toFixed(3)} - ${match.content?.substring(0, 100)}...`);
      });
    }
    
    return data;
    
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error);
    return false;
  }
}

async function testFullRAGPipeline(query) {
  console.log(`\nüöÄ Testando pipeline RAG completo para: "${query}"`);
  
  try {
    // 1. An√°lise da query
    const { data: analysis, error: analysisError } = await supabase.functions.invoke('query-analyzer', {
      body: { 
        query,
        userRole: 'citizen'
      }
    });

    if (analysisError) {
      console.error('‚ùå Erro na an√°lise da query:', analysisError);
      return false;
    }

    console.log('üéØ An√°lise da query:', {
      intent: analysis.intent,
      isConstructionQuery: analysis.isConstructionQuery,
      entities: analysis.entities
    });

    // 2. Busca vetorial
    const vectorResults = await testVectorSearch(query);
    if (!vectorResults) return false;

    // 3. S√≠ntese da resposta
    const { data: synthesis, error: synthesisError } = await supabase.functions.invoke('response-synthesizer', {
      body: {
        originalQuery: query,
        analysisResult: analysis,
        vectorResults: vectorResults,
        userRole: 'citizen'
      }
    });

    if (synthesisError) {
      console.error('‚ùå Erro na s√≠ntese da resposta:', synthesisError);
      return false;
    }

    console.log('‚úÖ Pipeline RAG completo executado');
    console.log(`üìä Confian√ßa: ${synthesis.confidence}`);
    console.log(`üìù Resposta (resumo): ${synthesis.response?.substring(0, 200)}...`);
    
    return synthesis;
    
  } catch (error) {
    console.error('‚ùå Erro inesperado no pipeline:', error);
    return false;
  }
}

async function runTests() {
  console.log('üî¨ INICIANDO TESTES DE CORRE√á√ÉO PARA BUSCA POR ALTURA');
  console.log('=' * 60);

  let passedTests = 0;
  let totalTests = 0;

  // Teste 1: Gera√ß√£o de embeddings
  console.log('\nüìã FASE 1: Testando gera√ß√£o de embeddings com OpenAI');
  for (const query of alturaTestQueries.slice(0, 3)) { // Teste apenas 3 para economizar
    totalTests++;
    const result = await testEmbeddingGeneration(query);
    if (result) passedTests++;
  }

  // Teste 2: Busca vetorial melhorada
  console.log('\nüìã FASE 2: Testando busca vetorial com sin√¥nimos');
  for (const query of alturaTestQueries.slice(0, 2)) { // Teste 2 queries
    totalTests++;
    const result = await testVectorSearch(query);
    if (result) passedTests++;
  }

  // Teste 3: Pipeline RAG completo
  console.log('\nüìã FASE 3: Testando pipeline RAG completo');
  const criticalQuery = 'qual a altura m√°xima permitida?';
  totalTests++;
  const pipelineResult = await testFullRAGPipeline(criticalQuery);
  if (pipelineResult) passedTests++;

  // Resultado final
  console.log('\n' + '=' * 60);
  console.log('üìä RESULTADO DOS TESTES');
  console.log(`‚úÖ Testes aprovados: ${passedTests}/${totalTests}`);
  console.log(`üìà Taxa de sucesso: ${((passedTests/totalTests) * 100).toFixed(1)}%`);
  
  if (passedTests === totalTests) {
    console.log('üéâ TODOS OS TESTES PASSARAM! Corre√ß√µes implementadas com sucesso.');
  } else if (passedTests >= totalTests * 0.8) {
    console.log('‚ö†Ô∏è Maioria dos testes passou, mas h√° pontos para melhorar.');
  } else {
    console.log('‚ùå Muitos testes falharam. Corre√ß√µes precisam ser revisadas.');
  }

  console.log('\nüîß PR√ìXIMOS PASSOS:');
  console.log('1. Deploy das fun√ß√µes atualizadas');
  console.log('2. Reprocessar base de conhecimento com novo sistema');
  console.log('3. Monitorar performance em produ√ß√£o');
}

// Executa os testes
runTests().catch(console.error);