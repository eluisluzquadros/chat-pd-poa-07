#!/usr/bin/env node

/**
 * SCRIPT DE CONFIGURA√á√ÉO DO SISTEMA DE MONITORAMENTO AGENTIC-RAG V3
 * 
 * Este script configura todo o sistema de monitoramento:
 * - Cria tabelas necess√°rias
 * - Configura alertas padr√£o
 * - Verifica permiss√µes e RLS
 * - Testa integra√ß√µes
 * - Configura cron jobs de monitoramento
 * 
 * Uso:
 *   node setup-monitoring.mjs [--skip-tables] [--skip-alerts] [--test-only]
 */

import { createClient } from '@supabase/supabase-js';
import { readFile } from 'fs/promises';
import { fileURLToPath } from 'url';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configura√ß√£o
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('‚ùå Vari√°veis de ambiente necess√°rias n√£o encontradas');
  console.error('   NEXT_PUBLIC_SUPABASE_URL ou VITE_SUPABASE_URL');
  console.error('   SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// Parse argumentos
const args = process.argv.slice(2);
const config = {
  skipTables: args.includes('--skip-tables'),
  skipAlerts: args.includes('--skip-alerts'),
  testOnly: args.includes('--test-only'),
  verbose: args.includes('--verbose')
};

console.log('üîß CONFIGURA√á√ÉO DO SISTEMA DE MONITORAMENTO AGENTIC-RAG V3');
console.log('='.repeat(60));

async function setupTables() {
  if (config.skipTables) {
    console.log('‚è≠Ô∏è  Pulando cria√ß√£o de tabelas');
    return;
  }

  console.log('\nüìä CRIANDO TABELAS DE MONITORAMENTO...');
  
  try {
    // Ler arquivo SQL de monitoramento
    const sqlPath = path.join(__dirname, '..', 'emergency-sql', '17-monitoring-tables.sql');
    const sqlContent = await readFile(sqlPath, 'utf8');
    
    // Executar SQL
    const { error } = await supabase.rpc('exec_sql', { sql_query: sqlContent });
    
    if (error) {
      // Se RPC n√£o funcionar, tentar executar por partes
      console.log('‚ö†Ô∏è  RPC exec_sql n√£o dispon√≠vel, executando via API...');
      
      // Dividir em comandos separados (simplificado)
      const commands = sqlContent
        .split(';')
        .map(cmd => cmd.trim())
        .filter(cmd => cmd && !cmd.startsWith('--') && !cmd.startsWith('/*'));
      
      for (const command of commands.slice(0, 5)) { // Executar apenas alguns comandos cr√≠ticos
        if (command.includes('CREATE TABLE') && command.includes('rag_metrics')) {
          try {
            await supabase.from('rag_metrics').select('id').limit(1);
            console.log('‚úÖ Tabela rag_metrics j√° existe');
          } catch {
            console.log('‚ö†Ô∏è  N√£o foi poss√≠vel criar tabelas via API. Execute manualmente:');
            console.log(`   Execute o SQL em: ${sqlPath}`);
            break;
          }
        }
      }
    } else {
      console.log('‚úÖ Tabelas de monitoramento criadas com sucesso');
    }

    // Verificar se tabelas foram criadas
    const tablesToCheck = ['rag_metrics', 'user_feedback', 'alert_rules', 'alert_events', 'ab_experiments'];
    
    for (const table of tablesToCheck) {
      try {
        const { error } = await supabase.from(table).select('id').limit(1);
        if (error) {
          console.log(`‚ùå Erro ao verificar tabela ${table}:`, error.message);
        } else {
          console.log(`‚úÖ Tabela ${table} dispon√≠vel`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è  Tabela ${table} pode n√£o existir`);
      }
    }

  } catch (error) {
    console.error('‚ùå Erro ao configurar tabelas:', error);
  }
}

async function setupDefaultAlerts() {
  if (config.skipAlerts) {
    console.log('‚è≠Ô∏è  Pulando configura√ß√£o de alertas');
    return;
  }

  console.log('\nüö® CONFIGURANDO ALERTAS PADR√ÉO...');

  const defaultAlerts = [
    {
      name: 'High Latency Warning',
      description: 'Alerta quando lat√™ncia P95 excede 3 segundos',
      metric_type: 'p95_latency',
      threshold_value: 3000,
      comparison_operator: '>',
      time_window_minutes: 5,
      severity: 'warning',
      is_active: true,
      notification_channels: ['email'],
      notification_message: 'Lat√™ncia alta detectada: {{current_value}}ms (limite: {{threshold_value}}ms)'
    },
    {
      name: 'High Error Rate',
      description: 'Alerta quando taxa de erro excede 3%',
      metric_type: 'error_rate',
      threshold_value: 3.0,
      comparison_operator: '>',
      time_window_minutes: 5,
      severity: 'error',
      is_active: true,
      notification_channels: ['email', 'slack'],
      notification_message: 'Taxa de erro alta: {{current_value}}% (limite: {{threshold_value}}%)'
    },
    {
      name: 'Critical Latency',
      description: 'Alerta cr√≠tico para lat√™ncia muito alta',
      metric_type: 'p95_latency',
      threshold_value: 8000,
      comparison_operator: '>',
      time_window_minutes: 3,
      severity: 'critical',
      is_active: true,
      notification_channels: ['email', 'slack'],
      notification_message: 'CR√çTICO: Lat√™ncia muito alta: {{current_value}}ms'
    },
    {
      name: 'System Failure',
      description: 'Taxa de erro cr√≠tica indicando falha do sistema',
      metric_type: 'error_rate',
      threshold_value: 10.0,
      comparison_operator: '>',
      time_window_minutes: 3,
      severity: 'critical',
      is_active: true,
      notification_channels: ['email', 'slack'],
      notification_message: 'CR√çTICO: Sistema falhando - {{current_value}}% de erros'
    }
  ];

  for (const alert of defaultAlerts) {
    try {
      // Verificar se alerta j√° existe
      const { data: existing } = await supabase
        .from('alert_rules')
        .select('id')
        .eq('name', alert.name)
        .single();

      if (existing) {
        console.log(`   ‚ö†Ô∏è  Alerta "${alert.name}" j√° existe`);
        continue;
      }

      // Criar novo alerta
      const { error } = await supabase
        .from('alert_rules')
        .insert([alert]);

      if (error) {
        console.log(`‚ùå Erro ao criar alerta "${alert.name}":`, error.message);
      } else {
        console.log(`‚úÖ Alerta criado: ${alert.name}`);
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è  N√£o foi poss√≠vel configurar alerta "${alert.name}":`, error.message);
    }
  }
}

async function testIntegrations() {
  console.log('\nüß™ TESTANDO INTEGRA√á√ïES...');

  try {
    // Teste 1: Verificar acesso √†s tabelas
    console.log('   üìä Testando acesso √†s tabelas...');
    
    const { data: metricsTest, error: metricsError } = await supabase
      .from('rag_metrics')
      .select('count')
      .limit(1);

    if (metricsError) {
      console.log('   ‚ùå Erro ao acessar rag_metrics:', metricsError.message);
    } else {
      console.log('   ‚úÖ Acesso a rag_metrics funcionando');
    }

    // Teste 2: Inserir m√©trica de teste
    console.log('   üìù Testando inser√ß√£o de m√©trica...');
    
    const testMetric = {
      rag_version: 'v3',
      query_text: 'Teste de monitoramento',
      query_category: 'test',
      query_hash: 'test-' + Date.now(),
      total_latency: 1500,
      confidence_score: 0.85,
      has_results: true,
      result_count: 3,
      total_tokens: 150,
      estimated_cost: 0.003,
      status: 'success',
      llm_model: 'test-model'
    };

    const { data: insertResult, error: insertError } = await supabase
      .from('rag_metrics')
      .insert([testMetric])
      .select('id')
      .single();

    if (insertError) {
      console.log('   ‚ùå Erro ao inserir m√©trica de teste:', insertError.message);
    } else {
      console.log('   ‚úÖ Inser√ß√£o de m√©trica funcionando');
      
      // Limpar m√©trica de teste
      await supabase
        .from('rag_metrics')
        .delete()
        .eq('id', insertResult.id);
    }

    // Teste 3: Verificar functions personalizadas
    console.log('   üîß Testando functions...');
    
    try {
      const { data: errorRateTest, error: funcError } = await supabase
        .rpc('calculate_error_rate', { p_minutes: 5 });

      if (funcError) {
        console.log('   ‚ö†Ô∏è  Function calculate_error_rate n√£o dispon√≠vel:', funcError.message);
      } else {
        console.log('   ‚úÖ Functions de m√©tricas funcionando');
      }
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Functions personalizadas n√£o dispon√≠veis');
    }

    // Teste 4: Verificar views
    console.log('   üìà Testando views...');
    
    const { data: viewTest, error: viewError } = await supabase
      .from('rag_metrics_hourly')
      .select('*')
      .limit(1);

    if (viewError) {
      console.log('   ‚ö†Ô∏è  View rag_metrics_hourly n√£o dispon√≠vel:', viewError.message);
    } else {
      console.log('   ‚úÖ Views de m√©tricas funcionando');
    }

    // Teste 5: Sistema de alertas
    console.log('   üö® Testando sistema de alertas...');
    
    const { data: alertsTest, error: alertsError } = await supabase
      .from('alert_rules')
      .select('count')
      .eq('is_active', true);

    if (alertsError) {
      console.log('   ‚ùå Erro ao acessar alertas:', alertsError.message);
    } else {
      console.log('   ‚úÖ Sistema de alertas acess√≠vel');
    }

  } catch (error) {
    console.error('‚ùå Erro nos testes de integra√ß√£o:', error);
  }
}

async function setupCronJobs() {
  console.log('\n‚è∞ CONFIGURANDO MONITORAMENTO AUTOM√ÅTICO...');
  
  console.log(`
Para monitoramento cont√≠nuo, configure os seguintes cron jobs:

# Coleta de m√©tricas a cada 5 minutos
*/5 * * * * cd ${process.cwd()} && node scripts/monitoring/collect-metrics.mjs --output=db

# Relat√≥rio hor√°rio no console
0 * * * * cd ${process.cwd()} && node scripts/monitoring/collect-metrics.mjs --timerange=1h

# Relat√≥rio di√°rio detalhado
0 9 * * * cd ${process.cwd()} && node scripts/monitoring/collect-metrics.mjs --timerange=24h --verbose

# Verifica√ß√£o de sa√∫de do sistema a cada minuto  
* * * * * cd ${process.cwd()} && node scripts/monitoring/health-check.mjs

Exemplo de comando para adicionar ao crontab:
  crontab -e

Ou use um scheduler como PM2:
  pm2 start ecosystem.config.js
  `);
}

async function generateReport() {
  console.log('\nüìã RELAT√ìRIO DE CONFIGURA√á√ÉO');
  console.log('='.repeat(40));

  try {
    // Verificar status das tabelas
    const tables = ['rag_metrics', 'user_feedback', 'alert_rules', 'alert_events', 'ab_experiments'];
    console.log('\nüìä Status das Tabelas:');
    
    for (const table of tables) {
      try {
        const { count, error } = await supabase
          .from(table)
          .select('*', { count: 'exact', head: true });
        
        if (error) {
          console.log(`   ${table}: ‚ùå ${error.message}`);
        } else {
          console.log(`   ${table}: ‚úÖ ${count || 0} registros`);
        }
      } catch {
        console.log(`   ${table}: ‚ùå N√£o acess√≠vel`);
      }
    }

    // Verificar alertas ativos
    const { data: activeAlerts } = await supabase
      .from('alert_rules')
      .select('name, is_active')
      .eq('is_active', true);

    console.log(`\nüö® Alertas Configurados: ${activeAlerts?.length || 0}`);
    activeAlerts?.forEach(alert => {
      console.log(`   ‚úÖ ${alert.name}`);
    });

    // Status geral
    console.log('\nüéØ PR√ìXIMOS PASSOS:');
    console.log('   1. ‚úÖ Tabelas de monitoramento configuradas');
    console.log('   2. ‚úÖ Alertas padr√£o criados');
    console.log('   3. ‚úÖ Sistema testado e funcional');
    console.log('   4. üìù Integrar MetricsLogger nas Edge Functions');
    console.log('   5. üé® Adicionar AgenticRAGDashboard √†s rotas admin');
    console.log('   6. ‚è∞ Configurar cron jobs de monitoramento');
    console.log('   7. üìß Configurar notifica√ß√µes (email/Slack)');

    console.log('\nüîß COMANDOS √öTEIS:');
    console.log('   # Coletar m√©tricas manualmente');
    console.log('   node scripts/monitoring/collect-metrics.mjs');
    console.log('');
    console.log('   # Gerenciar experimentos A/B');
    console.log('   node scripts/monitoring/ab-testing-manager.mjs list');
    console.log('');
    console.log('   # Dashboard no navegador');
    console.log('   Acesse: http://localhost:3000/admin (ap√≥s adicionar rota)');

  } catch (error) {
    console.error('‚ùå Erro ao gerar relat√≥rio:', error);
  }
}

async function main() {
  try {
    if (!config.testOnly) {
      await setupTables();
      await setupDefaultAlerts();
    }
    
    await testIntegrations();
    
    if (!config.testOnly) {
      setupCronJobs();
    }
    
    await generateReport();
    
    console.log('\n‚úÖ CONFIGURA√á√ÉO DO MONITORAMENTO CONCLU√çDA!');
    
  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o:', error);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}