import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Load environment variables
dotenv.config({ path: join(__dirname, '..', '.env.local') });

const SUPABASE_URL = process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('‚ùå Missing environment variables');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// Casos de teste espec√≠ficos para artigos da LEI/LUOS
const legalTestCases = [
  {
    question: "Qual artigo da LUOS trata da Certifica√ß√£o em Sustentabilidade Ambiental?",
    expected_answer: "Art. 81 - III: os acr√©scimos definidos em regulamento para projetos que obtenham Certifica√ß√£o em Sustentabilidade Ambiental, desde que n√£o ultrapassem o limite de 20% (vinte por cento) do total da √°rea constru√≠da comput√°vel permitida",
    category: "legal_articles",
    keywords: ["artigo 81", "certifica√ß√£o", "sustentabilidade", "ambiental", "III", "inciso III", "20%"]
  },
  {
    question: "Qual a regra para empreendimentos no 4¬∞ Distrito?",
    expected_answer: "Art. 74: Os empreendimentos localizados na ZOT 8.2 - 4¬∫ Distrito dever√£o observar as diretrizes espec√≠ficas do Programa de Revitaliza√ß√£o do 4¬∫ Distrito, com incentivos para uso misto e preserva√ß√£o do patrim√¥nio hist√≥rico",
    category: "legal_articles",
    keywords: ["artigo 74", "4¬∫ distrito", "quarto distrito", "ZOT 8.2", "empreendimentos", "revitaliza√ß√£o", "uso misto"]
  },
  {
    question: "O que diz o artigo sobre altura m√°xima de edifica√ß√£o?",
    expected_answer: "Art. 81: A altura m√°xima da edifica√ß√£o ser√° definida conforme a ZOT, podendo variar de 18m a 130m, com possibilidade de acr√©scimos mediante contrapartida",
    category: "legal_articles",
    keywords: ["artigo 81", "altura m√°xima", "edifica√ß√£o", "ZOT", "18m", "130m", "contrapartida"]
  },
  {
    question: "Qual artigo trata do coeficiente de aproveitamento?",
    expected_answer: "Art. 82: O coeficiente de aproveitamento define a rela√ß√£o entre a √°rea constru√≠da comput√°vel e a √°rea do terreno, variando entre b√°sico e m√°ximo conforme a ZOT",
    category: "legal_articles",
    keywords: ["artigo 82", "coeficiente", "aproveitamento", "b√°sico", "m√°ximo", "√°rea constru√≠da", "terreno"]
  },
  {
    question: "O que estabelece o artigo sobre recuos obrigat√≥rios?",
    expected_answer: "Art. 83: Os recuos obrigat√≥rios (frontal, lateral e de fundos) s√£o definidos conforme a altura da edifica√ß√£o e a largura da via, com m√≠nimo de 4m frontal",
    category: "legal_articles",
    keywords: ["artigo 83", "recuos", "obrigat√≥rios", "frontal", "lateral", "fundos", "4m"]
  },
  {
    question: "Qual artigo define o Estudo de Impacto de Vizinhan√ßa?",
    expected_answer: "Art. 89: O Estudo de Impacto de Vizinhan√ßa (EIV) ser√° exigido para empreendimentos de impacto, conforme crit√©rios de porte, uso e localiza√ß√£o",
    category: "legal_articles",
    keywords: ["artigo 89", "estudo", "impacto", "vizinhan√ßa", "EIV", "empreendimentos", "porte"]
  },
  {
    question: "O que diz sobre outorga onerosa do direito de construir?",
    expected_answer: "Art. 86: A outorga onerosa do direito de construir permite edificar acima do coeficiente b√°sico at√© o m√°ximo, mediante contrapartida financeira ao munic√≠pio",
    category: "legal_articles",
    keywords: ["artigo 86", "outorga onerosa", "direito de construir", "coeficiente b√°sico", "m√°ximo", "contrapartida"]
  },
  {
    question: "Qual artigo trata das ZEIS - Zonas Especiais de Interesse Social?",
    expected_answer: "Art. 92: As ZEIS s√£o por√ß√µes do territ√≥rio destinadas √† regulariza√ß√£o fundi√°ria e produ√ß√£o de habita√ß√£o de interesse social, com par√¢metros urban√≠sticos especiais",
    category: "legal_articles",
    keywords: ["artigo 92", "ZEIS", "zonas especiais", "interesse social", "regulariza√ß√£o", "habita√ß√£o", "HIS"]
  },
  {
    question: "O que estabelece sobre √°reas de preserva√ß√£o permanente?",
    expected_answer: "Art. 95: As √°reas de preserva√ß√£o permanente (APP) devem ser mantidas intocadas, salvo casos de utilidade p√∫blica ou interesse social com autoriza√ß√£o ambiental",
    category: "legal_articles",
    keywords: ["artigo 95", "APP", "preserva√ß√£o permanente", "utilidade p√∫blica", "interesse social", "autoriza√ß√£o ambiental"]
  },
  {
    question: "Qual artigo define os instrumentos de pol√≠tica urbana?",
    expected_answer: "Art. 78: S√£o instrumentos de pol√≠tica urbana o parcelamento, edifica√ß√£o ou utiliza√ß√£o compuls√≥rios, IPTU progressivo, desapropria√ß√£o, direito de preemp√ß√£o, entre outros",
    category: "legal_articles",
    keywords: ["artigo 78", "instrumentos", "pol√≠tica urbana", "parcelamento", "IPTU progressivo", "desapropria√ß√£o", "preemp√ß√£o"]
  }
];

async function addTestCases() {
  console.log('üìù Adicionando casos de teste legais ao banco de dados...\n');
  
  let successCount = 0;
  let errorCount = 0;
  
  for (const testCase of legalTestCases) {
    try {
      // Verificar se j√° existe
      const { data: existing } = await supabase
        .from('qa_test_cases')
        .select('id')
        .eq('question', testCase.question)
        .single();
      
      if (existing) {
        console.log(`‚ö†Ô∏è Caso j√° existe: "${testCase.question.substring(0, 50)}..."`);
        continue;
      }
      
      // Gerar test_id √∫nico
      const testId = `legal_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      // Inserir novo caso
      const { data, error } = await supabase
        .from('qa_test_cases')
        .insert({
          test_id: testId,
          query: testCase.question,  // campo 'query' ao inv√©s de 'question' apenas
          question: testCase.question,
          expected_answer: testCase.expected_answer,
          expected_keywords: testCase.keywords || [],
          category: testCase.category,
          complexity: 'high',
          is_active: true,
          tags: ['legal', 'artigo', 'luos'],
          is_sql_related: false,
          version: 1,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .select()
        .single();
      
      if (error) {
        console.error(`‚ùå Erro ao inserir: ${error.message}`);
        errorCount++;
      } else {
        console.log(`‚úÖ Adicionado caso ${data.id}: "${testCase.question.substring(0, 50)}..."`);
        successCount++;
      }
      
    } catch (err) {
      console.error(`‚ùå Erro: ${err.message}`);
      errorCount++;
    }
  }
  
  console.log('\n' + '='.repeat(70));
  console.log(`üìä RESUMO:`);
  console.log(`  ‚úÖ Casos adicionados: ${successCount}`);
  console.log(`  ‚ùå Erros: ${errorCount}`);
  console.log(`  ‚ö†Ô∏è Casos j√° existentes: ${legalTestCases.length - successCount - errorCount}`);
  
  // Verificar total de casos no banco
  const { count } = await supabase
    .from('qa_test_cases')
    .select('*', { count: 'exact', head: true });
  
  console.log(`  üìö Total de casos no banco: ${count}`);
}

// Executar
addTestCases().catch(console.error);