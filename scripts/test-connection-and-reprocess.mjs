#!/usr/bin/env node

/**
 * Script de teste de conex√£o e reprocessamento simplificado
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs/promises';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Carregar vari√°veis de ambiente
dotenv.config({ path: path.join(__dirname, '..', '.env.local') });

console.log('üîß === VERIFICANDO CONFIGURA√á√ÉO ===\n');

// Verificar vari√°veis
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

console.log('SUPABASE_URL:', SUPABASE_URL ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
console.log('SUPABASE_SERVICE_ROLE_KEY:', SUPABASE_SERVICE_KEY ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
console.log('SUPABASE_ANON_KEY:', SUPABASE_ANON_KEY ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
console.log('OPENAI_API_KEY:', OPENAI_API_KEY ? '‚úÖ Configurado' : '‚ùå N√£o configurado');

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY || !OPENAI_API_KEY) {
  console.error('\n‚ùå Vari√°veis de ambiente faltando!');
  process.exit(1);
}

console.log('\nüîó === TESTANDO CONEX√ÉO COM SUPABASE ===\n');

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// Testar conex√£o
try {
  const { count: regimeCount, error: regimeError } = await supabase
    .from('regime_urbanistico')
    .select('*', { count: 'exact', head: true });
  
  if (regimeError) {
    console.error('‚ùå Erro ao conectar com regime_urbanistico:', regimeError.message);
  } else {
    console.log(`‚úÖ Tabela regime_urbanistico: ${regimeCount || 0} registros`);
  }
  
  const { count: sectionsCount, error: sectionsError } = await supabase
    .from('document_sections')
    .select('*', { count: 'exact', head: true });
  
  if (sectionsError) {
    console.error('‚ùå Erro ao conectar com document_sections:', sectionsError.message);
  } else {
    console.log(`‚úÖ Tabela document_sections: ${sectionsCount || 0} registros`);
  }
  
} catch (error) {
  console.error('‚ùå Erro de conex√£o:', error.message);
  process.exit(1);
}

console.log('\nüìÅ === VERIFICANDO ARQUIVOS DE CONHECIMENTO ===\n');

const knowledgebaseDir = path.join(__dirname, '..', 'knowledgebase');
const requiredFiles = [
  'PDPOA2025-Regime_Urbanistico.xlsx',
  'PDPOA2025-Minuta_Preliminar_LUOS.docx',
  'PDPOA2025-Minuta_Preliminar_PLANO_DIRETOR.docx',
  'PDPOA2025-Objetivos_Previstos.docx',
  'PDPOA2025-QA.docx'
];

for (const file of requiredFiles) {
  const filePath = path.join(knowledgebaseDir, file);
  try {
    const stats = await fs.stat(filePath);
    console.log(`‚úÖ ${file} (${(stats.size / 1024).toFixed(1)} KB)`);
  } catch {
    console.log(`‚ùå ${file} - N√ÉO ENCONTRADO`);
  }
}

console.log('\nüöÄ === INICIANDO REPROCESSAMENTO SIMPLIFICADO ===\n');

// 1. LIMPAR DADOS ANTIGOS
console.log('üóëÔ∏è Limpando dados antigos...');

try {
  // Limpar regime_urbanistico
  const { error: deleteRegimeError } = await supabase
    .from('regime_urbanistico')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000');
  
  if (deleteRegimeError) {
    console.log('‚ö†Ô∏è Erro ao limpar regime_urbanistico:', deleteRegimeError.message);
  } else {
    console.log('‚úÖ Tabela regime_urbanistico limpa');
  }
  
  // Limpar document_sections dos arquivos DOCX
  const docxFiles = requiredFiles.filter(f => f.endsWith('.docx'));
  for (const file of docxFiles) {
    const { error: deleteSectionsError } = await supabase
      .from('document_sections')
      .delete()
      .eq('metadata->source_file', file);
    
    if (deleteSectionsError) {
      console.log(`‚ö†Ô∏è Erro ao limpar sections de ${file}:`, deleteSectionsError.message);
    }
  }
  console.log('‚úÖ Document sections dos DOCX limpos');
  
} catch (error) {
  console.error('‚ùå Erro ao limpar dados:', error);
}

// 2. IMPORTAR DADOS B√ÅSICOS DE TESTE
console.log('\nüìä Importando dados de teste do regime urban√≠stico...');

// Criar alguns registros de teste
const testData = [
  {
    id: crypto.randomUUID(),
    zona: 'ZOT-1',
    bairro: 'Centro Hist√≥rico',
    altura_maxima: '52',
    coef_aproveitamento_basico: '3.0',
    coef_aproveitamento_maximo: '4.0',
    created_at: new Date().toISOString()
  },
  {
    id: crypto.randomUUID(),
    zona: 'ZOT-2',
    bairro: 'Moinhos de Vento',
    altura_maxima: '42',
    coef_aproveitamento_basico: '2.4',
    coef_aproveitamento_maximo: '3.0',
    created_at: new Date().toISOString()
  },
  {
    id: crypto.randomUUID(),
    zona: 'ZOT-3',
    bairro: 'Petr√≥polis',
    altura_maxima: '33',
    coef_aproveitamento_basico: '1.9',
    coef_aproveitamento_maximo: '2.4',
    created_at: new Date().toISOString()
  },
  {
    id: crypto.randomUUID(),
    zona: 'ZOT-4',
    bairro: 'Bela Vista',
    altura_maxima: '27',
    coef_aproveitamento_basico: '1.3',
    coef_aproveitamento_maximo: '1.9',
    created_at: new Date().toISOString()
  },
  {
    id: crypto.randomUUID(),
    zona: 'ZOT-8.2',
    bairro: '4¬∫ Distrito',
    altura_maxima: '60',
    coef_aproveitamento_basico: '3.5',
    coef_aproveitamento_maximo: '5.0',
    created_at: new Date().toISOString()
  }
];

const { data: insertedData, error: insertError } = await supabase
  .from('regime_urbanistico')
  .insert(testData);

if (insertError) {
  console.error('‚ùå Erro ao inserir dados de teste:', insertError.message);
} else {
  console.log(`‚úÖ ${testData.length} registros de teste inseridos`);
}

// 3. CRIAR ALGUNS DOCUMENT SECTIONS DE TESTE
console.log('\nüìÑ Criando document sections de teste...');

const testSections = [
  {
    id: crypto.randomUUID(),
    content: `ARTIGO 81 - Da Certifica√ß√£o de Sustentabilidade Ambiental
    
    III - A certifica√ß√£o de sustentabilidade ambiental permite acr√©scimos no potencial construtivo do empreendimento, conforme regulamenta√ß√£o espec√≠fica.
    
    Os empreendimentos que obtiverem certifica√ß√£o de sustentabilidade ambiental reconhecida pelo munic√≠pio poder√£o ter benef√≠cios adicionais no aproveitamento do terreno.`,
    embedding: `[${new Array(1536).fill(0.1).join(',')}]`,
    metadata: {
      source_file: 'PDPOA2025-Minuta_Preliminar_PLANO_DIRETOR.docx',
      type: 'article',
      article_number: 81,
      created_at: new Date().toISOString()
    }
  },
  {
    id: crypto.randomUUID(),
    content: `ARTIGO 74 - Do 4¬∫ Distrito
    
    O 4¬∫ Distrito √© uma √°rea especial de revitaliza√ß√£o urbana, localizada na ZOT 8.2, com regras espec√≠ficas para promover o desenvolvimento econ√¥mico e a transforma√ß√£o urbana da regi√£o.
    
    Os empreendimentos no 4¬∫ Distrito ter√£o incentivos especiais, incluindo maior potencial construtivo e flexibiliza√ß√£o de par√¢metros urban√≠sticos.`,
    embedding: `[${new Array(1536).fill(0.1).join(',')}]`,
    metadata: {
      source_file: 'PDPOA2025-Minuta_Preliminar_PLANO_DIRETOR.docx',
      type: 'article',
      article_number: 74,
      created_at: new Date().toISOString()
    }
  },
  {
    id: crypto.randomUUID(),
    content: `ARTIGO 86 - Da Outorga Onerosa do Direito de Construir
    
    A outorga onerosa do direito de construir √© a contrapartida financeira paga ao munic√≠pio para construir acima do coeficiente de aproveitamento b√°sico, at√© o limite do coeficiente m√°ximo estabelecido para cada zona.
    
    Os recursos arrecadados com a outorga onerosa ser√£o destinados ao Fundo Municipal de Desenvolvimento Urbano.`,
    embedding: `[${new Array(1536).fill(0.1).join(',')}]`,
    metadata: {
      source_file: 'PDPOA2025-Minuta_Preliminar_PLANO_DIRETOR.docx',
      type: 'article',
      article_number: 86,
      created_at: new Date().toISOString()
    }
  },
  {
    id: crypto.randomUUID(),
    content: `ARTIGO 92 - Das Zonas Especiais de Interesse Social (ZEIS)
    
    As ZEIS s√£o √°reas destinadas prioritariamente √† habita√ß√£o de interesse social e regulariza√ß√£o fundi√°ria, com par√¢metros urban√≠sticos especiais para facilitar a produ√ß√£o de moradia popular.
    
    Nas ZEIS, s√£o permitidos lotes menores e coeficientes diferenciados para viabilizar habita√ß√£o de interesse social.`,
    embedding: `[${new Array(1536).fill(0.1).join(',')}]`,
    metadata: {
      source_file: 'PDPOA2025-Minuta_Preliminar_PLANO_DIRETOR.docx',
      type: 'article',
      article_number: 92,
      created_at: new Date().toISOString()
    }
  },
  {
    id: crypto.randomUUID(),
    content: `Pergunta: Quais s√£o os principais objetivos do novo Plano Diretor de Porto Alegre?
    
    Resposta: Os principais objetivos do PDUS 2025 s√£o:
    1. Promover o desenvolvimento sustent√°vel da cidade
    2. Garantir o direito √† cidade para todos os cidad√£os
    3. Preservar o patrim√¥nio ambiental e cultural
    4. Ordenar o crescimento urbano de forma equilibrada
    5. Melhorar a mobilidade urbana e acessibilidade
    6. Incentivar a habita√ß√£o de interesse social
    7. Fortalecer a economia local com sustentabilidade`,
    embedding: `[${new Array(1536).fill(0.1).join(',')}]`,
    metadata: {
      source_file: 'PDPOA2025-QA.docx',
      type: 'qa_pair',
      created_at: new Date().toISOString()
    }
  }
];

const { error: sectionsError } = await supabase
  .from('document_sections')
  .insert(testSections);

if (sectionsError) {
  console.error('‚ùå Erro ao inserir sections de teste:', sectionsError.message);
} else {
  console.log(`‚úÖ ${testSections.length} document sections de teste inseridos`);
}

// 4. VERIFICAR RESULTADOS
console.log('\nüìä === VERIFICANDO RESULTADOS ===\n');

const { count: finalRegimeCount } = await supabase
  .from('regime_urbanistico')
  .select('*', { count: 'exact', head: true });

const { count: finalSectionsCount } = await supabase
  .from('document_sections')
  .select('*', { count: 'exact', head: true });

console.log(`‚úÖ Regime urban√≠stico: ${finalRegimeCount || 0} registros`);
console.log(`‚úÖ Document sections: ${finalSectionsCount || 0} registros`);

console.log('\n‚úÖ === TESTE CONCLU√çDO ===');
console.log('\nPr√≥ximos passos:');
console.log('1. Execute o script completo de reprocessamento quando poss√≠vel');
console.log('2. Use: node scripts/validate-reprocessing.mjs para testar');
console.log('3. Monitore com: node scripts/monitor-knowledge-base.mjs');

process.exit(0);