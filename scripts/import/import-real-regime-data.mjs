#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';
import XLSX from 'xlsx';
import fs from 'fs';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

console.log('üöÄ Importa√ß√£o REAL de Dados de Regime Urban√≠stico\n');

// Fun√ß√£o para limpar valores num√©ricos do Excel
function cleanNumericValue(value) {
  if (value === null || value === undefined || value === '') return null;
  
  // Se for uma data do Excel (n√∫mero serial), retornar null
  if (typeof value === 'number' && value > 40000 && value < 50000) {
    return null;
  }
  
  // Converter para string e limpar
  const str = String(value).trim();
  
  // Remover caracteres n√£o num√©ricos exceto ponto e v√≠rgula
  const cleaned = str.replace(/[^\d.,\-]/g, '');
  
  // Substituir v√≠rgula por ponto
  const normalized = cleaned.replace(',', '.');
  
  // Converter para n√∫mero
  const num = parseFloat(normalized);
  
  // Retornar null se n√£o for um n√∫mero v√°lido
  return isNaN(num) ? null : num;
}

// Fun√ß√£o para converter valor booleano
function cleanBooleanValue(value) {
  if (value === null || value === undefined || value === '') return false;
  const str = String(value).toLowerCase().trim();
  return str === 'sim' || str === 'yes' || str === 'true' || str === '1';
}

async function importRegimeUrbanistico() {
  const regimeFile = './knowledgebase/PDPOA2025-Regime_Urbanistico.xlsx';
  
  if (!fs.existsSync(regimeFile)) {
    console.error('‚ùå Arquivo n√£o encontrado:', regimeFile);
    return;
  }
  
  console.log('üìã Lendo arquivo Excel de Regime Urban√≠stico...');
  const workbook = XLSX.readFile(regimeFile);
  const worksheet = workbook.Sheets['Sheet'];
  const data = XLSX.utils.sheet_to_json(worksheet);
  
  console.log(`üìä Total de registros encontrados: ${data.length}`);
  
  // Limpar tabela existente
  console.log('üßπ Limpando dados existentes...');
  const { error: deleteError } = await supabase
    .from('regime_urbanistico')
    .delete()
    .neq('id', 0); // Deletar todos
  
  if (deleteError) {
    console.error('‚ùå Erro ao limpar tabela:', deleteError);
  }
  
  // Processar e inserir dados em lotes
  const batchSize = 50;
  let successCount = 0;
  
  for (let i = 0; i < data.length; i += batchSize) {
    const batch = data.slice(i, i + batchSize);
    
    const processedBatch = batch.map(row => ({
      bairro: row['Bairro'] || '',
      zona: row['Zona'] || '',
      altura_maxima_edificacao_isolada: cleanNumericValue(row['Altura M√°xima - Edifica√ß√£o Isolada']),
      coeficiente_aproveitamento_basico: cleanNumericValue(row['Coeficiente de Aproveitamento - B√°sico']),
      coeficiente_aproveitamento_maximo: cleanNumericValue(row['Coeficiente de Aproveitamento - M√°ximo']),
      area_minima_lote: cleanNumericValue(row['√Årea M√≠nima do Lote']),
      testada_minima_lote: cleanNumericValue(row['Testada M√≠nima do Lote']),
      modulo_fracionamento: cleanNumericValue(row['M√≥dulo de Fracionamento']),
      face_maxima_quarteirao: cleanNumericValue(row['Face M√°xima do Quarteir√£o']),
      area_maxima_quarteirao: cleanNumericValue(row['√Årea M√°xima do Quarteir√£o']),
      area_minima_quarteirao: cleanNumericValue(row['√Årea M√≠nima do Quarteir√£o']),
      enquadramento_fracionamento: row['Enquadramento (Fracionamento)'] || null,
      area_destinacao_publica_malha_viaria_fracionamento: row['√Årea de Destina√ß√£o P√∫blica ‚Äì Malha Vi√°ria (Fracionamento)'] || null,
      area_destinacao_publica_equipamentos_fracionamento: row['√Årea de Destina√ß√£o P√∫blica ‚Äì Equipamentos (Fracionamento)'] || null,
      enquadramento_desmembramento_tipo1: row['Enquadramento (Desmembramento Tipo 1)'] || null,
      area_publica_malha_viaria_desmembramento_tipo1: row['√Årea P√∫blica ‚Äì Malha Vi√°ria (Desmembramento Tipo 1)'] || null,
      area_publica_equipamentos_desmembramento_tipo1: row['√Årea P√∫blica ‚Äì Equipamentos (Desmembramento Tipo 1)'] || null,
      enquadramento_desmembramento_tipo2: row['Enquadramento (Desmembramento Tipo 2)'] || null,
      area_publica_malha_viaria_desmembramento_tipo2: row['√Årea P√∫blica ‚Äì Malha Vi√°ria (Desmembramento Tipo 2)'] || null,
      area_publica_equipamentos_desmembramento_tipo2: row['√Årea P√∫blica ‚Äì Equipamentos (Desmembramento Tipo 2)'] || null,
      enquadramento_desmembramento_tipo3: row['Enquadramento (Desmembramento Tipo 3)'] || null,
      area_publica_malha_viaria_desmembramento_tipo3: row['√Årea P√∫blica ‚Äì Malha Vi√°ria (Desmembramento Tipo 3)'] || null,
      area_publica_equipamentos_desmembramento_tipo3: row['√Årea P√∫blica ‚Äì Equipamentos (Desmembramento Tipo 3)'] || null,
      enquadramento_loteamento: row['Enquadramento (Loteamento)'] || null,
      area_publica_malha_viaria_loteamento: row['√Årea P√∫blica ‚Äì Malha Vi√°ria (Loteamento)'] || null,
      area_publica_equipamentos_loteamento: row['√Årea P√∫blica ‚Äì Equipamentos (Loteamento)'] || null,
      coeficiente_aproveitamento_basico_4d: cleanNumericValue(row['Coeficiente de Aproveitamento B√°sico +4D']),
      coeficiente_aproveitamento_maximo_4d: cleanNumericValue(row['Coeficiente de Aproveitamento M√°ximo +4D']),
      afastamentos_frente: row['Afastamentos - Frente'] || null,
      afastamentos_laterais: row['Afastamentos - Laterais'] || null,
      afastamentos_fundos: row['Afastamentos - Fundos'] || null,
      taxa_permeabilidade_acima_1500m2: row['Taxa de Permeabilidade (acima de 1.500 m¬≤)'] || null,
      taxa_permeabilidade_ate_1500m2: row['Taxa de Permeabilidade (at√© 1.500 m¬≤)'] || null,
      fator_conversao_taxa_permeabilidade: row['Fator de Convers√£o da Taxa de Permeabilidade'] || null,
      recuo_jardim: row['Recuo de Jardim'] || null,
      comercio_varejista_inocuo_restricao_porte: row['Com√©rcio Varejista In√≥cuo ‚Äì Restri√ß√£o / Porte'] || null,
      comercio_varejista_ia1_restricao_porte: row['Com√©rcio Varejista IA1 ‚Äì Restri√ß√£o / Porte'] || null,
      comercio_varejista_ia2_restricao_porte: row['Com√©rcio Varejista IA2 ‚Äì Restri√ß√£o / Porte'] || null,
      comercio_atacadista_ia1_restricao_porte: row['Com√©rcio Atacadista IA1 ‚Äì Restri√ß√£o / Porte'] || null,
      comercio_atacadista_ia2_restricao_porte: row['Com√©rcio Atacadista IA2 ‚Äì Restri√ß√£o / Porte'] || null,
      comercio_atacadista_ia3_restricao_porte: row['Com√©rcio Atacadista IA3 ‚Äì Restri√ß√£o / Porte'] || null,
      servico_inocuo_restricao_porte: row['Servi√ßo In√≥cuo ‚Äì Restri√ß√£o / Porte'] || null,
      servico_ia1_restricao_porte: row['Servi√ßo IA1 ‚Äì Restri√ß√£o / Porte'] || null,
      servico_ia2_restricao_porte: row['Servi√ßo IA2 ‚Äì Restri√ß√£o / Porte'] || null,
      servico_ia3_restricao_porte: row['Servi√ßo IA3 ‚Äì Restri√ß√£o / Porte'] || null,
      industria_inocua_restricao_porte: row['Ind√∫stria In√≥cua ‚Äì Restri√ß√£o / Porte'] || null,
      industria_interferencia_ambiental_restricao_porte: row['Ind√∫stria com Interfer√™ncia Ambiental ‚Äì Restri√ß√£o / Porte'] || null,
      nivel_controle_polarizacao_entretenimento_noturno: row['N√≠vel de Controle de Polariza√ß√£o de Entretenimento Noturno'] || null
    }));
    
    const { data: insertedData, error } = await supabase
      .from('regime_urbanistico')
      .insert(processedBatch)
      .select();
    
    if (error) {
      console.error(`‚ùå Erro ao inserir lote ${i/batchSize + 1}:`, error);
    } else {
      successCount += insertedData.length;
      console.log(`‚úÖ Lote ${i/batchSize + 1}: ${insertedData.length} registros inseridos`);
    }
  }
  
  console.log(`\n‚úÖ Total de registros importados: ${successCount}/${data.length}`);
}

async function importZotsBairros() {
  const zotsFile = './knowledgebase/PDPOA2025-ZOTs_vs_Bairros.xlsx';
  
  if (!fs.existsSync(zotsFile)) {
    console.error('‚ùå Arquivo n√£o encontrado:', zotsFile);
    return;
  }
  
  console.log('\nüìã Lendo arquivo Excel de ZOTs vs Bairros...');
  const workbook = XLSX.readFile(zotsFile);
  const worksheet = workbook.Sheets['Sheet'];
  const data = XLSX.utils.sheet_to_json(worksheet);
  
  console.log(`üìä Total de registros encontrados: ${data.length}`);
  
  // Limpar tabela existente
  console.log('üßπ Limpando dados existentes...');
  const { error: deleteError } = await supabase
    .from('zots_bairros')
    .delete()
    .neq('id', 0); // Deletar todos
  
  if (deleteError) {
    console.error('‚ùå Erro ao limpar tabela:', deleteError);
  }
  
  // Processar e inserir dados em lotes
  const batchSize = 50;
  let successCount = 0;
  
  for (let i = 0; i < data.length; i += batchSize) {
    const batch = data.slice(i, i + batchSize);
    
    const processedBatch = batch.map(row => ({
      bairro: row['Bairro'] || '',
      zona: row['Zona'] || '',
      total_zonas_no_bairro: parseInt(row['Total_Zonas_no_Bairro']) || 0,
      tem_zona_especial: cleanBooleanValue(row['Tem_Zona_Especial'])
    }));
    
    const { data: insertedData, error } = await supabase
      .from('zots_bairros')
      .insert(processedBatch)
      .select();
    
    if (error) {
      console.error(`‚ùå Erro ao inserir lote ${i/batchSize + 1}:`, error);
    } else {
      successCount += insertedData.length;
      console.log(`‚úÖ Lote ${i/batchSize + 1}: ${insertedData.length} registros inseridos`);
    }
  }
  
  console.log(`\n‚úÖ Total de registros importados: ${successCount}/${data.length}`);
}

async function main() {
  console.log('üöÄ Iniciando importa√ß√£o de dados reais...\n');
  
  await importRegimeUrbanistico();
  await importZotsBairros();
  
  // Verificar importa√ß√£o
  console.log('\nüìä Verificando importa√ß√£o final...');
  
  const { count: regimeCount } = await supabase
    .from('regime_urbanistico')
    .select('*', { count: 'exact', head: true });
  
  const { count: zotsCount } = await supabase
    .from('zots_bairros')
    .select('*', { count: 'exact', head: true });
  
  console.log(`\nüìä Resumo Final:`);
  console.log(`- Regime Urban√≠stico: ${regimeCount} registros`);
  console.log(`- ZOTs vs Bairros: ${zotsCount} registros`);
  
  // Testar algumas queries
  console.log('\nüß™ Testando queries...');
  
  const { data: teste1 } = await supabase
    .from('regime_urbanistico')
    .select('bairro, zona, altura_maxima_edificacao_isolada')
    .eq('bairro', 'CENTRO HIST√ìRICO')
    .limit(5);
  
  console.log('\nCentro Hist√≥rico:', teste1);
  
  const { data: teste2 } = await supabase
    .from('regime_urbanistico')
    .select('bairro, zona, altura_maxima_edificacao_isolada')
    .gte('altura_maxima_edificacao_isolada', 60)
    .limit(5);
  
  console.log('\nZonas com altura >= 60m:', teste2);
  
  console.log('\nüéâ Importa√ß√£o conclu√≠da!');
}

main().catch(console.error);