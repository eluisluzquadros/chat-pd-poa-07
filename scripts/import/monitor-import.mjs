#!/usr/bin/env node

/**
 * Monitor de importa√ß√£o em tempo real
 * 
 * Acompanha o progresso da importa√ß√£o e mostra estat√≠sticas em tempo real
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs/promises';
import path from 'path';

const SUPABASE_URL = process.env.SUPABASE_URL || 'http://localhost:54321';
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;

if (!SUPABASE_ANON_KEY) {
  console.error('‚ùå SUPABASE_ANON_KEY n√£o encontrada');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

class ImportMonitor {
  constructor() {
    this.startTime = Date.now();
    this.previousCounts = { regime: 0, zots: 0 };
    this.isRunning = true;
  }

  async getCurrentCounts() {
    try {
      const [regimeResult, zotsResult] = await Promise.all([
        supabase.from('regime_urbanistico').select('*', { count: 'exact', head: true }),
        supabase.from('zots_bairros').select('*', { count: 'exact', head: true })
      ]);

      return {
        regime: regimeResult.count || 0,
        zots: zotsResult.count || 0,
        regimeError: regimeResult.error,
        zotsError: zotsResult.error
      };
    } catch (error) {
      return {
        regime: 0,
        zots: 0,
        error: error.message
      };
    }
  }

  calculateProgress(current, expected) {
    return expected > 0 ? Math.min((current / expected) * 100, 100) : 0;
  }

  formatDuration(ms) {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);

    if (hours > 0) {
      return `${hours}h ${minutes % 60}m ${seconds % 60}s`;
    } else if (minutes > 0) {
      return `${minutes}m ${seconds % 60}s`;
    } else {
      return `${seconds}s`;
    }
  }

  generateProgressBar(percentage, width = 30) {
    const filled = Math.floor((percentage / 100) * width);
    const empty = width - filled;
    const bar = '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
    return `[${bar}] ${percentage.toFixed(1)}%`;
  }

  async displayStatus() {
    // Limpar tela
    console.clear();
    
    const counts = await this.getCurrentCounts();
    const elapsed = Date.now() - this.startTime;
    
    // Cabe√ßalho
    console.log('üìä MONITOR DE IMPORTA√á√ÉO - REGIME URBAN√çSTICO');
    console.log('='.repeat(60));
    console.log(`‚è±Ô∏è  Tempo decorrido: ${this.formatDuration(elapsed)}`);
    console.log(`üîÑ √öltima atualiza√ß√£o: ${new Date().toLocaleTimeString()}`);
    console.log('');

    // Status de conectividade
    if (counts.error) {
      console.log('‚ùå ERRO DE CONEX√ÉO:', counts.error);
      console.log('');
    } else {
      console.log('‚úÖ Conectado ao Supabase');
    }

    // Progress - Regime Urban√≠stico
    const regimeProgress = this.calculateProgress(counts.regime, 387);
    const regimeBar = this.generateProgressBar(regimeProgress);
    const regimeStatus = counts.regimeError ? '‚ùå ERRO' : 
                        counts.regime === 387 ? '‚úÖ COMPLETO' : 
                        counts.regime > 0 ? 'üîÑ EM PROGRESSO' : '‚≠ï AGUARDANDO';

    console.log('üìã REGIME URBAN√çSTICO:');
    console.log(`   ${regimeStatus}`);
    console.log(`   ${regimeBar}`);
    console.log(`   üìä ${counts.regime}/387 registros`);
    
    if (counts.regimeError) {
      console.log(`   ‚ùå Erro: ${counts.regimeError.message}`);
    }
    console.log('');

    // Progress - ZOTs vs Bairros
    const zotsProgress = this.calculateProgress(counts.zots, 385);
    const zotsBar = this.generateProgressBar(zotsProgress);
    const zotsStatus = counts.zotsError ? '‚ùå ERRO' : 
                      counts.zots === 385 ? '‚úÖ COMPLETO' : 
                      counts.zots > 0 ? 'üîÑ EM PROGRESSO' : '‚≠ï AGUARDANDO';

    console.log('üó∫Ô∏è  ZOTS VS BAIRROS:');
    console.log(`   ${zotsStatus}`);
    console.log(`   ${zotsBar}`);
    console.log(`   üìä ${counts.zots}/385 registros`);
    
    if (counts.zotsError) {
      console.log(`   ‚ùå Erro: ${counts.zotsError.message}`);
    }
    console.log('');

    // Progress Total
    const totalCurrent = counts.regime + counts.zots;
    const totalExpected = 387 + 385;
    const totalProgress = this.calculateProgress(totalCurrent, totalExpected);
    const totalBar = this.generateProgressBar(totalProgress);

    console.log('üéØ PROGRESSO TOTAL:');
    console.log(`   ${totalBar}`);
    console.log(`   üìä ${totalCurrent}/${totalExpected} registros`);
    console.log('');

    // Taxa de importa√ß√£o
    const regimeInc = counts.regime - this.previousCounts.regime;
    const zotsInc = counts.zots - this.previousCounts.zots;
    const totalInc = regimeInc + zotsInc;

    if (totalInc > 0) {
      console.log('üìà TAXA DE IMPORTA√á√ÉO:');
      console.log(`   ‚ö° +${totalInc} registros nos √∫ltimos 3 segundos`);
      console.log(`   üöÄ ~${Math.round(totalInc * 20)} registros/minuto`);
      console.log('');
    }

    // Estimativa de conclus√£o
    if (totalInc > 0 && totalProgress < 100) {
      const remaining = totalExpected - totalCurrent;
      const rate = totalInc / 3; // registros por segundo
      const estimatedSeconds = remaining / rate;
      console.log('‚è≥ ESTIMATIVA:');
      console.log(`   üéØ Conclus√£o em ~${this.formatDuration(estimatedSeconds * 1000)}`);
      console.log('');
    }

    // Status final
    if (counts.regime === 387 && counts.zots === 385) {
      console.log('üéâ IMPORTA√á√ÉO CONCLU√çDA COM SUCESSO!');
      console.log('   ‚úÖ Todos os registros foram importados');
      console.log('   üí° Execute: npm run regime:test para validar');
      console.log('');
      console.log('Pressione Ctrl+C para sair...');
    } else {
      console.log('‚åõ Aguardando pr√≥xima atualiza√ß√£o...');
      console.log('   üí° Pressione Ctrl+C para sair');
    }

    // Atualizar contadores anteriores
    this.previousCounts = { regime: counts.regime, zots: counts.zots };
  }

  async start() {
    console.log('üöÄ Iniciando monitor de importa√ß√£o...\n');
    
    // Handler para Ctrl+C
    process.on('SIGINT', () => {
      console.log('\n\nüëã Monitor interrompido pelo usu√°rio');
      console.log('üìä Importa√ß√£o pode continuar em background');
      process.exit(0);
    });

    // Loop principal
    while (this.isRunning) {
      await this.displayStatus();
      await new Promise(resolve => setTimeout(resolve, 3000)); // Atualizar a cada 3 segundos
    }
  }
}

// Fun√ß√£o para mostrar ajuda
function showHelp() {
  console.log(`
üìä MONITOR DE IMPORTA√á√ÉO - REGIME URBAN√çSTICO

DESCRI√á√ÉO:
  Monitora em tempo real o progresso da importa√ß√£o de dados.

USO:
  node scripts/monitor-import.mjs [op√ß√µes]

OP√á√ïES:
  --help, -h     Mostra esta ajuda
  --once         Mostra status uma vez e sai

EXEMPLOS:
  # Monitor cont√≠nuo
  node scripts/monitor-import.mjs

  # Status √∫nico
  node scripts/monitor-import.mjs --once

  # Usar com npm
  npm run regime:monitor

DICAS:
  - Execute em um terminal separado durante a importa√ß√£o
  - Use Ctrl+C para sair sem interromper a importa√ß√£o
  - O monitor atualiza a cada 3 segundos
`);
}

// Fun√ß√£o para status √∫nico
async function showStatusOnce() {
  const monitor = new ImportMonitor();
  await monitor.displayStatus();
}

// Main
async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    return;
  }

  if (args.includes('--once')) {
    await showStatusOnce();
    return;
  }

  const monitor = new ImportMonitor();
  await monitor.start();
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(error => {
    console.error('‚ùå Erro no monitor:', error);
    process.exit(1);
  });
}