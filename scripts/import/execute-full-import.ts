#!/usr/bin/env tsx

/**
 * Script Principal - Importa√ß√£o Completa
 * Executa importa√ß√£o e valida√ß√£o dos dados de Regime Urban√≠stico
 * Data: 2025-07-31
 */

import { execSync } from 'child_process';
import { existsSync } from 'fs';
import { join } from 'path';

// Importar fun√ß√µes dos outros scripts
import { importarDados } from './safe-supabase-import';
import { validarDados } from './validate-imported-data';

async function verificarPreRequisitos(): Promise<boolean> {
    console.log('üîç Verificando pr√©-requisitos...');
    
    // Verificar se os arquivos de dados existem
    const arquivosNecessarios = [
        'processed-data/database-schema.sql',
        'processed-data/regime-urbanistico-processed.json',
        'processed-data/zots-bairros-processed.json'
    ];
    
    let tudoOk = true;
    
    for (const arquivo of arquivosNecessarios) {
        const caminhoCompleto = join(process.cwd(), arquivo);
        if (!existsSync(caminhoCompleto)) {
            console.error(`‚ùå Arquivo n√£o encontrado: ${arquivo}`);
            tudoOk = false;
        } else {
            console.log(`‚úÖ Arquivo encontrado: ${arquivo}`);
        }
    }
    
    // Verificar vari√°veis de ambiente
    if (!process.env.SUPABASE_URL && !process.env.SUPABASE_ANON_KEY && !process.env.SUPABASE_SERVICE_ROLE_KEY) {
        console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
        console.log('   Configure SUPABASE_URL e SUPABASE_ANON_KEY ou SUPABASE_SERVICE_ROLE_KEY');
        tudoOk = false;
    } else {
        console.log('‚úÖ Vari√°veis de ambiente configuradas');
    }
    
    // Verificar depend√™ncias npm
    try {
        execSync('npm list @supabase/supabase-js', { stdio: 'ignore' });
        console.log('‚úÖ Depend√™ncias npm instaladas');
    } catch (error) {
        console.error('‚ùå Depend√™ncia @supabase/supabase-js n√£o encontrada');
        console.log('   Execute: npm install @supabase/supabase-js');
        tudoOk = false;
    }
    
    return tudoOk;
}

async function executarImportacaoCompleta(): Promise<void> {
    console.log('üöÄ Iniciando processo completo de importa√ß√£o');
    console.log('=' .repeat(70));
    
    const inicioTempo = Date.now();
    
    try {
        // Etapa 1: Verificar pr√©-requisitos
        console.log('\nüìã ETAPA 1: Verifica√ß√£o de Pr√©-requisitos');
        const preRequisitosOk = await verificarPreRequisitos();
        
        if (!preRequisitosOk) {
            console.error('\n‚ùå Pr√©-requisitos n√£o atendidos. Abortando importa√ß√£o.');
            process.exit(1);
        }
        
        console.log('\n‚úÖ Todos os pr√©-requisitos atendidos. Prosseguindo...');
        
        // Etapa 2: Executar importa√ß√£o
        console.log('\nüìä ETAPA 2: Importa√ß√£o dos Dados');
        console.log('Iniciando importa√ß√£o segura...');
        
        await importarDados();
        
        console.log('\n‚úÖ Importa√ß√£o conclu√≠da com sucesso!');
        
        // Etapa 3: Validar dados importados
        console.log('\nüîç ETAPA 3: Valida√ß√£o dos Dados Importados');
        console.log('Iniciando valida√ß√£o...');
        
        await validarDados();
        
        console.log('\n‚úÖ Valida√ß√£o conclu√≠da!');
        
        // Etapa 4: Relat√≥rio final
        const fimTempo = Date.now();
        const tempoTotalSegundos = Math.round((fimTempo - inicioTempo) / 1000);
        
        console.log('\nüéâ PROCESSO COMPLETO FINALIZADO');
        console.log('=' .repeat(70));
        console.log(`‚è±Ô∏è Tempo total: ${tempoTotalSegundos} segundos`);
        console.log('üìÑ Relat√≥rio de valida√ß√£o salvo em: validation-report.json');
        console.log('\nüìä Dados importados:');
        console.log('   ‚Ä¢ Regime Urban√≠stico: 387 registros esperados');
        console.log('   ‚Ä¢ ZOTs vs Bairros: 385 registros esperados');
        console.log('   ‚Ä¢ Total: 772 registros');
        
        console.log('\nüîç Pr√≥ximos passos recomendados:');
        console.log('   1. Revisar o relat√≥rio de valida√ß√£o (validation-report.json)');
        console.log('   2. Testar queries no sistema RAG');
        console.log('   3. Verificar performance das consultas');
        console.log('   4. Criar √≠ndices adicionais se necess√°rio');
        
    } catch (error) {
        console.error('\nüí• ERRO CR√çTICO NO PROCESSO:', error);
        console.log('\nüîß Passos para resolu√ß√£o:');
        console.log('   1. Verificar conectividade com Supabase');
        console.log('   2. Confirmar permiss√µes de acesso ao banco');
        console.log('   3. Verificar integridade dos arquivos de dados');
        console.log('   4. Consultar logs detalhados acima');
        
        process.exit(1);
    }
}

async function mostrarAjuda(): Promise<void> {
    console.log('üìö Script de Importa√ß√£o Completa - Regime Urban√≠stico');
    console.log('=' .repeat(70));
    console.log('');
    console.log('Este script executa o processo completo de importa√ß√£o dos dados');
    console.log('de Regime Urban√≠stico para o banco Supabase.');
    console.log('');
    console.log('üîß Pr√©-requisitos:');
    console.log('   ‚Ä¢ Vari√°veis de ambiente configuradas (SUPABASE_URL, SUPABASE_ANON_KEY)');
    console.log('   ‚Ä¢ Depend√™ncia @supabase/supabase-js instalada');
    console.log('   ‚Ä¢ Arquivos de dados processados na pasta processed-data/');
    console.log('');
    console.log('üìä Dados que ser√£o importados:');
    console.log('   ‚Ä¢ Regime Urban√≠stico: 387 registros');
    console.log('   ‚Ä¢ ZOTs vs Bairros: 385 registros');
    console.log('   ‚Ä¢ Total: 772 registros');
    console.log('');
    console.log('üöÄ Uso:');
    console.log('   npx tsx scripts/execute-full-import.ts');
    console.log('   npx tsx scripts/execute-full-import.ts --help');
    console.log('');
    console.log('üìã O processo inclui:');
    console.log('   1. Verifica√ß√£o de pr√©-requisitos');
    console.log('   2. Importa√ß√£o segura em lotes');
    console.log('   3. Valida√ß√£o completa dos dados');
    console.log('   4. Relat√≥rio final detalhado');
    console.log('');
}

// Fun√ß√£o principal
async function main(): Promise<void> {
    const args = process.argv.slice(2);
    
    if (args.includes('--help') || args.includes('-h')) {
        await mostrarAjuda();
        return;
    }
    
    await executarImportacaoCompleta();
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
    main().catch(error => {
        console.error('Erro fatal:', error);
        process.exit(1);
    });
}

export { executarImportacaoCompleta };