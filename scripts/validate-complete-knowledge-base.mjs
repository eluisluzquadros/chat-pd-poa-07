#!/usr/bin/env node
/**
 * Valida√ß√£o COMPLETA e RIGOROSA da base de conhecimento
 * Este script verifica se TODOS os elementos esperados est√£o presentes
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config({ path: '.env' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// ESTRUTURA COMPLETA DA LUOS DE PORTO ALEGRE
// Atualizada: documento original cont√©m 10 t√≠tulos (I-X)
const EXPECTED_LUOS_STRUCTURE = {
  titles: [
    { number: 'I', name: 'Das Disposi√ß√µes Gerais' },
    { number: 'II', name: 'Do Zoneamento' },
    { number: 'III', name: 'Das Atividades' },
    { number: 'IV', name: 'Da Edifica√ß√£o' },
    { number: 'V', name: 'Do Parcelamento do Solo' },
    { number: 'VI', name: 'Dos Instrumentos de Gest√£o' },
    { number: 'VII', name: 'Das Penalidades' },
    { number: 'VIII', name: 'Do Licenciamento' },
    { number: 'IX', name: 'Das Disposi√ß√µes Gerais e Complementares' },
    { number: 'X', name: 'Das Disposi√ß√µes Finais e Transit√≥rias' }
  ],
  articleRanges: {
    'T√≠tulo I': { start: 1, end: 8 },
    'T√≠tulo II': { start: 9, end: 30 },
    'T√≠tulo III': { start: 31, end: 45 },
    'T√≠tulo IV': { start: 46, end: 70 },
    'T√≠tulo V': { start: 71, end: 85 },
    'T√≠tulo VI': { start: 86, end: 100 },
    'T√≠tulo VII': { start: 101, end: 110 },
    'T√≠tulo VIII': { start: 111, end: 118 },
    'T√≠tulo IX': { start: 119, end: 121 },
    'T√≠tulo X': { start: 119, end: 121 }  // Disposi√ß√µes Finais
  }
};

async function validateKnowledgeBase() {
  console.log('üîç VALIDA√á√ÉO RIGOROSA DA BASE DE CONHECIMENTO');
  console.log('=' .repeat(70));
  
  const errors = [];
  const warnings = [];
  const success = [];
  
  // 1. Verificar TODOS os t√≠tulos esperados da LUOS
  console.log('\nüìö VALIDANDO T√çTULOS DA LUOS:');
  
  for (const expectedTitle of EXPECTED_LUOS_STRUCTURE.titles) {
    const searchTerms = [
      `T√çTULO ${expectedTitle.number}`,
      `T√≠tulo ${expectedTitle.number}`,
      expectedTitle.name
    ];
    
    let found = false;
    
    for (const term of searchTerms) {
      const { count } = await supabase
        .from('legal_articles')
        .select('*', { count: 'exact', head: true })
        .eq('document_type', 'LUOS')
        .ilike('full_content', `%${term}%`);
      
      if (count > 0) {
        found = true;
        break;
      }
    }
    
    if (found) {
      success.push(`‚úÖ T√≠tulo ${expectedTitle.number} - ${expectedTitle.name}`);
      console.log(`  ‚úÖ T√≠tulo ${expectedTitle.number} - ${expectedTitle.name}`);
    } else {
      errors.push(`‚ùå FALTANDO: T√≠tulo ${expectedTitle.number} - ${expectedTitle.name}`);
      console.log(`  ‚ùå FALTANDO: T√≠tulo ${expectedTitle.number} - ${expectedTitle.name}`);
    }
  }
  
  // 2. Verificar artigos esperados
  console.log('\nüìñ VALIDANDO ARTIGOS DA LUOS:');
  
  const { data: luosArticles } = await supabase
    .from('legal_articles')
    .select('article_number')
    .eq('document_type', 'LUOS')
    .lt('article_number', 9000)
    .order('article_number');
  
  const articleNumbers = luosArticles?.map(a => a.article_number) || [];
  
  // Verificar artigos cr√≠ticos (disposi√ß√µes finais)
  const criticalArticles = [119, 120, 121];
  for (const art of criticalArticles) {
    if (articleNumbers.includes(art)) {
      console.log(`  ‚úÖ Art. ${art}¬∫ (Disposi√ß√µes Finais) presente`);
    } else {
      errors.push(`‚ùå FALTANDO: Art. ${art}¬∫ (Disposi√ß√µes Finais)`);
      console.log(`  ‚ùå FALTANDO: Art. ${art}¬∫ (Disposi√ß√µes Finais)`);
    }
  }
  
  // 3. Verificar gaps nos artigos
  const minArt = Math.min(...articleNumbers);
  const maxArt = Math.max(...articleNumbers);
  const missingArticles = [];
  
  for (let i = minArt; i <= maxArt; i++) {
    if (!articleNumbers.includes(i)) {
      missingArticles.push(i);
    }
  }
  
  if (missingArticles.length > 0) {
    warnings.push(`‚ö†Ô∏è ${missingArticles.length} artigos faltando entre ${minArt} e ${maxArt}`);
    console.log(`  ‚ö†Ô∏è Artigos faltando: ${missingArticles.slice(0, 10).join(', ')}${missingArticles.length > 10 ? '...' : ''}`);
  }
  
  // 4. Verificar embeddings
  console.log('\nüîÆ VALIDANDO EMBEDDINGS:');
  
  const { count: totalDocs } = await supabase
    .from('legal_articles')
    .select('*', { count: 'exact', head: true });
  
  const { count: docsWithEmbedding } = await supabase
    .from('legal_articles')
    .select('*', { count: 'exact', head: true })
    .not('embedding', 'is', null);
  
  const { count: docsWithoutEmbedding } = await supabase
    .from('legal_articles')
    .select('*', { count: 'exact', head: true })
    .is('embedding', null);
  
  console.log(`  Total de documentos: ${totalDocs}`);
  console.log(`  Com embeddings: ${docsWithEmbedding}`);
  console.log(`  Sem embeddings: ${docsWithoutEmbedding}`);
  
  if (docsWithoutEmbedding > 0) {
    warnings.push(`‚ö†Ô∏è ${docsWithoutEmbedding} documentos sem embeddings`);
  }
  
  // 5. Verificar keywords
  console.log('\nüè∑Ô∏è VALIDANDO KEYWORDS:');
  
  const { data: titleX } = await supabase
    .from('legal_articles')
    .select('keywords')
    .eq('document_type', 'LUOS')
    .eq('article_number', 9350)
    .single();
  
  if (titleX?.keywords?.includes('T√≠tulo X')) {
    console.log('  ‚úÖ T√≠tulo X tem keywords corretas');
  } else {
    warnings.push('‚ö†Ô∏è T√≠tulo X sem keywords adequadas');
    console.log('  ‚ö†Ô∏è T√≠tulo X sem keywords adequadas');
  }
  
  // 6. Verificar estrutura do PDUS
  console.log('\nüìò VALIDANDO PDUS:');
  
  const { count: pdusCount } = await supabase
    .from('legal_articles')
    .select('*', { count: 'exact', head: true })
    .eq('document_type', 'PDUS');
  
  console.log(`  Total de elementos do PDUS: ${pdusCount}`);
  
  // 7. Relat√≥rio Final
  console.log('\n' + '=' .repeat(70));
  console.log('üìä RELAT√ìRIO DE VALIDA√á√ÉO:');
  console.log('=' .repeat(70));
  
  if (errors.length === 0) {
    console.log('\n‚úÖ NENHUM ERRO CR√çTICO ENCONTRADO');
  } else {
    console.log('\nüö® ERROS CR√çTICOS ENCONTRADOS:');
    errors.forEach(e => console.log(`  ${e}`));
  }
  
  if (warnings.length > 0) {
    console.log('\n‚ö†Ô∏è AVISOS:');
    warnings.forEach(w => console.log(`  ${w}`));
  }
  
  // 8. Status Final
  console.log('\nüìà STATUS FINAL:');
  const completeness = ((success.length / EXPECTED_LUOS_STRUCTURE.titles.length) * 100).toFixed(1);
  console.log(`  Completude dos T√≠tulos: ${completeness}%`);
  console.log(`  Erros Cr√≠ticos: ${errors.length}`);
  console.log(`  Avisos: ${warnings.length}`);
  
  if (errors.length === 0 && warnings.length === 0) {
    console.log('\n‚úÖ BASE DE CONHECIMENTO EST√Å COMPLETA E VALIDADA!');
  } else {
    console.log('\n‚ùå BASE DE CONHECIMENTO PRECISA DE CORRE√á√ïES!');
    console.log('   Execute as corre√ß√µes necess√°rias antes de afirmar que est√° completa.');
  }
  
  return {
    isComplete: errors.length === 0,
    errors,
    warnings,
    completeness
  };
}

// Executar valida√ß√£o
validateKnowledgeBase()
  .then(result => {
    if (!result.isComplete) {
      process.exit(1);  // Exit with error code if not complete
    }
  })
  .catch(console.error);