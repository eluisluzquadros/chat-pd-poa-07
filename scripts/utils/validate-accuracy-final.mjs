#!/usr/bin/env node

import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import chalk from 'chalk';
import ora from 'ora';
import Table from 'cli-table3';

// Load environment variables
dotenv.config({ path: '.env' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Comprehensive test suite - 100 queries across all categories
const testSuite = {
  'Artigos Legais': [
    'O que diz o artigo 1?',
    'Qual o conte√∫do do artigo 20?',
    'O que estabelece o artigo 45?',
    'Explique o artigo 55',
    'O que define o artigo 75?',
    'Qual √© o artigo 81?',
    'O que trata o artigo 100?',
    'Artigo 119 sobre macrozona',
    'Disposi√ß√µes do artigo 192',
    'O que diz o artigo 3 sobre objetivos?',
    'Artigo 7 sobre fun√ß√£o social',
    'O que √© o artigo 10 sobre zoneamento?',
    'Artigo 15 sobre parcelamento',
    'O que diz o artigo 25?',
    'Artigo 30 sobre opera√ß√µes urbanas',
    'O que estabelece o artigo 35?',
    'Artigo 40 sobre preemp√ß√£o',
    'O que √© o artigo 50?',
    'Artigo 60 sobre conselhos',
    'O que diz o artigo 70?'
  ],
  
  'Regime Urban√≠stico': [
    'Altura m√°xima em Petr√≥polis',
    'Taxa de ocupa√ß√£o no Centro',
    'Par√¢metros de Cidade Baixa',
    'Regime urban√≠stico de Menino Deus',
    'Coeficiente em Moinhos de Vento',
    'Altura no Bom Fim',
    'Taxa de ocupa√ß√£o em Auxiliadora',
    'Par√¢metros do Cristal',
    'Regime da Tristeza',
    'Altura em Ipanema',
    'Coeficiente no Partenon',
    'Taxa em Santana',
    'Regime de Teres√≥polis',
    'Par√¢metros da Azenha',
    'Altura na Vila Nova',
    'Taxa no Jardim Bot√¢nico',
    'Coeficiente em Bel√©m Novo',
    'Regime da Restinga',
    'Par√¢metros do Sarandi',
    'Altura m√°xima na Cavalhada'
  ],
  
  'Zonas e ZOTs': [
    'O que √© ZOT-08?',
    'Caracter√≠sticas da ZOT-07',
    'Par√¢metros da ZOT-13',
    'Bairros da ZOT-15',
    'O que √© ZOT-01?',
    'ZOT-02 caracter√≠sticas',
    'Diferen√ßa entre ZOT-03 e ZOT-04',
    'O que permite a ZOT-05?',
    'ZOT-06 par√¢metros',
    '√Åreas da ZOT-09',
    'ZOT-10 caracter√≠sticas',
    'O que √© ZOT-11?',
    'ZOT-12 permite o qu√™?',
    'Bairros na ZOT-14',
    'ZOT-16 caracter√≠sticas',
    'Zona rural permite?',
    'ZOT-08.1 diferen√ßas',
    'ZOT-08.2 caracter√≠sticas',
    'ZOT-08.3 par√¢metros',
    'Zonas especiais quais s√£o?'
  ],
  
  'Prote√ß√£o e Riscos': [
    '√Åreas de risco de inunda√ß√£o',
    'Bairros com prote√ß√£o contra enchentes',
    'Zonas de preserva√ß√£o ambiental',
    '√Åreas n√£o edific√°veis',
    'Prote√ß√£o do patrim√¥nio hist√≥rico',
    '√Åreas de risco geol√≥gico',
    'Zonas de prote√ß√£o de mananciais',
    '√Åreas sujeitas a deslizamentos',
    'Prote√ß√£o de nascentes',
    '√Åreas de preserva√ß√£o permanente',
    'Risco de alagamento onde?',
    'Prote√ß√£o da orla do Gua√≠ba',
    '√Åreas verdes protegidas',
    'Zonas de amortecimento',
    'Prote√ß√£o de morros',
    '√Åreas de risco alto',
    'Prote√ß√£o contra ocupa√ß√£o irregular',
    'Zonas de interesse ambiental',
    '√Åreas de recupera√ß√£o ambiental',
    'Prote√ß√£o de c√≥rregos'
  ],
  
  'Conceitos Urban√≠sticos': [
    'O que √© outorga onerosa?',
    'Defini√ß√£o de ZEIS',
    'O que √© taxa de ocupa√ß√£o?',
    'Conceito de coeficiente de aproveitamento',
    'O que significa recuo frontal?',
    'Defini√ß√£o de gabarito',
    'O que √© afastamento lateral?',
    'Conceito de uso misto',
    'O que √© densidade construtiva?',
    'Defini√ß√£o de solo criado',
    'O que √© transfer√™ncia do direito de construir?',
    'Conceito de opera√ß√£o urbana consorciada',
    'O que √© direito de preemp√ß√£o?',
    'Defini√ß√£o de IPTU progressivo',
    'O que √© estudo de impacto de vizinhan√ßa?',
    'Conceito de regulariza√ß√£o fundi√°ria',
    'O que √© concess√£o urban√≠stica?',
    'Defini√ß√£o de macrozona',
    'O que √© parcelamento do solo?',
    'Conceito de remembramento'
  ]
};

// Test a single query
async function testQuery(query, category) {
  const startTime = Date.now();
  
  try {
    const response = await fetch(`${supabaseUrl}/functions/v1/agentic-rag`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${supabaseKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: query,
        bypassCache: false // Use cache for faster testing
      }),
      signal: AbortSignal.timeout(10000) // 10 second timeout
    });

    const responseTime = Date.now() - startTime;

    if (!response.ok) {
      return { 
        success: false, 
        responseTime, 
        error: `HTTP ${response.status}`,
        category 
      };
    }

    const data = await response.json();
    
    // Success criteria
    const hasResponse = data.response && data.response.length > 50;
    const goodConfidence = (data.confidence || 0) >= 0.7;
    const quickResponse = responseTime < 5000;
    
    const success = hasResponse && (goodConfidence || quickResponse);
    
    return {
      success,
      responseTime,
      confidence: data.confidence || 0,
      responseLength: data.response ? data.response.length : 0,
      cached: data.cached || false,
      category
    };
    
  } catch (error) {
    return { 
      success: false, 
      error: error.message,
      category,
      responseTime: Date.now() - startTime
    };
  }
}

// Test a category
async function testCategory(categoryName, queries) {
  console.log(chalk.cyan(`\nüìÇ Testing ${categoryName} (${queries.length} queries)`));
  console.log('‚îÄ'.repeat(50));
  
  const results = [];
  const spinner = ora('Testing...').start();
  
  for (let i = 0; i < queries.length; i++) {
    spinner.text = `[${i + 1}/${queries.length}] ${queries[i]}`;
    
    const result = await testQuery(queries[i], categoryName);
    results.push(result);
    
    if (result.success) {
      spinner.text = chalk.green(`‚úÖ [${i + 1}/${queries.length}] ${queries[i]}`);
    } else {
      spinner.text = chalk.red(`‚ùå [${i + 1}/${queries.length}] ${queries[i]}`);
    }
    
    // Small delay between queries
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  spinner.stop();
  
  const successCount = results.filter(r => r.success).length;
  const successRate = (successCount / results.length) * 100;
  const avgResponseTime = results
    .filter(r => r.responseTime)
    .reduce((sum, r) => sum + r.responseTime, 0) / results.length;
  
  console.log(chalk.blue(`\nüìä ${categoryName}: ${successRate.toFixed(1)}% (${successCount}/${results.length})`));
  console.log(chalk.gray(`   Avg response time: ${avgResponseTime.toFixed(0)}ms`));
  
  return { 
    category: categoryName, 
    results, 
    successRate,
    avgResponseTime,
    successCount,
    totalCount: results.length
  };
}

// Generate final report
async function generateFinalReport(categoryResults) {
  console.log(chalk.cyan.bold('\n\n' + '‚ïê'.repeat(60)));
  console.log(chalk.cyan.bold('         üìä VALIDA√á√ÉO FINAL DE ACUR√ÅCIA'));
  console.log(chalk.cyan.bold('‚ïê'.repeat(60) + '\n'));
  
  // Summary table
  const summaryTable = new Table({
    head: ['Categoria', 'Sucesso', 'Taxa', 'Tempo M√©dio'],
    colWidths: [25, 12, 12, 15]
  });
  
  let totalTests = 0;
  let totalPassed = 0;
  let totalResponseTime = 0;
  
  categoryResults.forEach(cat => {
    totalTests += cat.totalCount;
    totalPassed += cat.successCount;
    totalResponseTime += cat.avgResponseTime;
    
    const color = cat.successRate >= 90 ? chalk.green : 
                  cat.successRate >= 80 ? chalk.yellow : 
                  chalk.red;
    
    summaryTable.push([
      cat.category,
      `${cat.successCount}/${cat.totalCount}`,
      color(`${cat.successRate.toFixed(1)}%`),
      `${cat.avgResponseTime.toFixed(0)}ms`
    ]);
  });
  
  console.log(summaryTable.toString());
  
  // Overall statistics
  const overallRate = (totalPassed / totalTests) * 100;
  const avgResponseTime = totalResponseTime / categoryResults.length;
  
  console.log(chalk.cyan('\nüìà ESTAT√çSTICAS GLOBAIS:'));
  console.log('‚îÄ'.repeat(40));
  console.log(`Total de Testes: ${totalTests}`);
  console.log(`Testes Aprovados: ${totalPassed}`);
  console.log(`Testes Falhados: ${totalTests - totalPassed}`);
  console.log(`Tempo M√©dio de Resposta: ${avgResponseTime.toFixed(0)}ms`);
  
  // Database stats
  const { count: docCount } = await supabase
    .from('document_sections')
    .select('*', { count: 'exact', head: true });
  
  console.log(`Documentos na Base: ${docCount}`);
  
  // FINAL VERDICT
  console.log(chalk.cyan.bold('\n' + '‚ïê'.repeat(60)));
  console.log(chalk.cyan.bold('                 üéØ RESULTADO FINAL'));
  console.log(chalk.cyan.bold('‚ïê'.repeat(60) + '\n'));
  
  const fontSize = 'bold';
  if (overallRate >= 95) {
    console.log(chalk.green.bold(`  ACUR√ÅCIA GLOBAL: ${overallRate.toFixed(2)}%`));
    console.log(chalk.green.bold('\n  ‚úÖ META DE 95% ALCAN√áADA!'));
    console.log(chalk.green('\n  üéâ PARAB√âNS! SISTEMA PRONTO PARA PRODU√á√ÉO!'));
  } else if (overallRate >= 90) {
    console.log(chalk.yellow.bold(`  ACUR√ÅCIA GLOBAL: ${overallRate.toFixed(2)}%`));
    console.log(chalk.yellow.bold(`\n  ‚ö†Ô∏è PR√ìXIMO DA META (faltam ${(95 - overallRate).toFixed(2)}%)`));
    console.log(chalk.yellow('\n  Continue processando mais documentos.'));
  } else {
    console.log(chalk.red.bold(`  ACUR√ÅCIA GLOBAL: ${overallRate.toFixed(2)}%`));
    console.log(chalk.red.bold(`\n  ‚ùå ABAIXO DA META (faltam ${(95 - overallRate).toFixed(2)}%)`));
    console.log(chalk.red('\n  Necess√°rio processar mais documentos.'));
  }
  
  console.log(chalk.cyan.bold('\n' + '‚ïê'.repeat(60) + '\n'));
  
  // Recommendations
  if (overallRate < 95) {
    console.log(chalk.cyan('üìù RECOMENDA√á√ïES PARA ALCAN√áAR 95%:\n'));
    
    categoryResults.forEach(cat => {
      if (cat.successRate < 90) {
        console.log(chalk.yellow(`‚Ä¢ Melhorar ${cat.category}: ${cat.successRate.toFixed(1)}%`));
      }
    });
    
    const docsNeeded = Math.ceil((95 - overallRate) * 100);
    console.log(chalk.gray(`\n‚Ä¢ Adicionar aproximadamente ${docsNeeded} documentos`));
    console.log(chalk.gray(`‚Ä¢ Processar mais chunks da LUOS e Plano Diretor`));
    console.log(chalk.gray(`‚Ä¢ Adicionar dados estruturados dos 94 bairros`));
  }
  
  // Save report
  const reportData = {
    timestamp: new Date().toISOString(),
    overallAccuracy: overallRate,
    totalTests,
    totalPassed,
    avgResponseTime,
    documentCount: docCount,
    categoryBreakdown: categoryResults.map(c => ({
      category: c.category,
      successRate: c.successRate,
      tests: c.totalCount
    }))
  };
  
  try {
    await supabase.from('performance_reports').insert({
      report_data: reportData,
      created_at: new Date().toISOString()
    });
    console.log(chalk.gray('\nüìù Relat√≥rio salvo no banco de dados'));
  } catch {
    console.log(chalk.gray('\nüìù Relat√≥rio gerado (n√£o salvo)'));
  }
  
  return overallRate;
}

// Main function
async function main() {
  console.log(chalk.cyan.bold('\nüéØ VALIDA√á√ÉO FINAL DE ACUR√ÅCIA DO SISTEMA RAG'));
  console.log(chalk.gray('Testando 100 queries em 5 categorias...\n'));
  
  const startTime = Date.now();
  const categoryResults = [];
  
  // Test each category
  for (const [categoryName, queries] of Object.entries(testSuite)) {
    const result = await testCategory(categoryName, queries);
    categoryResults.push(result);
  }
  
  // Generate final report
  const finalAccuracy = await generateFinalReport(categoryResults);
  
  const totalTime = Math.floor((Date.now() - startTime) / 1000);
  console.log(chalk.gray(`\n‚è±Ô∏è Tempo total de teste: ${Math.floor(totalTime / 60)}m ${totalTime % 60}s`));
  
  // Exit with appropriate code
  process.exit(finalAccuracy >= 95 ? 0 : 1);
}

// Run
main().catch(console.error);