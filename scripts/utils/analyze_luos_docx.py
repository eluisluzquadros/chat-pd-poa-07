#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Analisar o documento LUOS original para verificar a estrutura correta
"""

import docx
import re
import os
import sys

# Set UTF-8 encoding for Windows
if sys.platform == 'win32':
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# Caminho do arquivo
file_path = 'knowledgebase/PDPOA2025-Minuta_Preliminar_LUOS.docx'

if not os.path.exists(file_path):
    print(f"‚ùå Arquivo n√£o encontrado: {file_path}")
    exit(1)

print('üìñ AN√ÅLISE DO DOCUMENTO LUOS ORIGINAL')
print('=' * 70)
print(f'Arquivo: {file_path}')
print()

try:
    # Abrir o documento
    doc = docx.Document(file_path)
    
    # Coletar todo o texto
    all_paragraphs = []
    for para in doc.paragraphs:
        text = para.text.strip()
        if text:
            all_paragraphs.append(text)
    
    print(f'Total de par√°grafos: {len(all_paragraphs)}')
    print()
    
    # Buscar t√≠tulos
    titles = {}
    roman_numerals = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII']
    
    for para in all_paragraphs:
        # Buscar padr√£o T√çTULO
        if 'T√çTULO' in para.upper():
            for num in roman_numerals:
                pattern = f'T√çTULO\\s+{num}(?:\\s*[-‚Äì]\\s*|\\s+)(.*)'.replace('\\', '\\\\')
                match = re.search(pattern, para, re.IGNORECASE)
                if match:
                    title_name = match.group(1).strip() if match.group(1) else para
                    titles[num] = title_name
                    break
    
    # Mostrar t√≠tulos encontrados
    print('üìö T√çTULOS ENCONTRADOS:')
    print('-' * 70)
    
    # Ordenar por n√∫mero romano
    roman_to_int = {r: i for i, r in enumerate(roman_numerals, 1)}
    sorted_titles = sorted(titles.items(), key=lambda x: roman_to_int.get(x[0], 99))
    
    for num, name in sorted_titles:
        print(f'  T√çTULO {num}: {name[:60]}')
    
    print(f'\n‚úÖ Total de t√≠tulos: {len(titles)}')
    
    # Verificar t√≠tulos espec√≠ficos VII, VIII, IX, X
    print('\nüéØ VERIFICA√á√ÉO DE T√çTULOS CR√çTICOS:')
    print('-' * 70)
    
    critical_titles = ['VII', 'VIII', 'IX', 'X']
    for title_num in critical_titles:
        if title_num in titles:
            print(f'  ‚úÖ T√çTULO {title_num} EXISTE: {titles[title_num][:50]}')
        else:
            print(f'  ‚ùå T√çTULO {title_num} N√ÉO ENCONTRADO')
    
    # Buscar artigos das disposi√ß√µes finais
    print('\nüìù ARTIGOS DAS DISPOSI√á√ïES FINAIS:')
    print('-' * 70)
    
    for art_num in [119, 120, 121, 122, 123]:
        found = False
        for para in all_paragraphs:
            if f'Art. {art_num}' in para or f'Artigo {art_num}' in para:
                print(f'  ‚úÖ Art. {art_num}¬∫: {para[:60]}...')
                found = True
                break
        if not found:
            print(f'  ‚ùå Art. {art_num}¬∫ n√£o encontrado')
    
    # Buscar men√ß√£o a "Disposi√ß√µes Finais"
    print('\nüîç BUSCA POR "DISPOSI√á√ïES FINAIS":')
    print('-' * 70)
    
    for para in all_paragraphs:
        if 'disposi√ß√µes finais' in para.lower() or 'disposi√ß√µes transit√≥rias' in para.lower():
            print(f'  ‚úÖ Encontrado: {para[:80]}...')
            break
    
except Exception as e:
    print(f'‚ùå Erro ao processar documento: {e}')

print('\n' + '=' * 70)
print('AN√ÅLISE CONCLU√çDA')