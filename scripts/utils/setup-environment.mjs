#!/usr/bin/env node

/**
 * Setup de Ambiente - Edge Functions
 * Sistema de Chat PD POA - Porto Alegre
 * 
 * Configura todas as vari√°veis de ambiente e depend√™ncias necess√°rias
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

const PROJECT_REF = 'ngrqwmvuhvjkeohesbxs';

// Vari√°veis de ambiente necess√°rias para as functions
const ENV_TEMPLATE = {
  // Supabase Configuration
  SUPABASE_URL: process.env.SUPABASE_URL || 'YOUR_SUPABASE_URL',
  SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY || 'YOUR_ANON_KEY',
  SUPABASE_SERVICE_ROLE_KEY: process.env.SUPABASE_SERVICE_ROLE_KEY || 'YOUR_SERVICE_ROLE_KEY',
  
  // OpenAI Configuration (necess√°rio para v√°rias functions)
  OPENAI_API_KEY: 'sk-proj-XXXXXX', // Deve ser configurado manualmente
  
  // Gemini Configuration (para functions Gemini)
  GOOGLE_AI_API_KEY: 'XXXXXXX', // Deve ser configurado manualmente
  
  // Claude Configuration (para functions Claude)
  ANTHROPIC_API_KEY: 'XXXXXXX', // Deve ser configurado manualmente
  
  // Groq Configuration
  GROQ_API_TOKEN: 'XXXXXXX', // Deve ser configurado manualmente
  
  // DeepSeek Configuration
  DEEPSEEK_API_KEY: 'XXXXXXX', // Deve ser configurado manualmente
  
  // LLama Configuration (se necess√°rio)
  LLAMA_API_KEY: 'XXXXXXX', // Deve ser configurado manualmente
  
  // Application Settings
  NODE_ENV: 'production',
  LOG_LEVEL: 'info',
  
  // Rate Limiting & Performance
  MAX_REQUESTS_PER_MINUTE: '60',
  CACHE_TTL_SECONDS: '300',
  
  // Search & RAG Settings
  VECTOR_SEARCH_SIMILARITY_THRESHOLD: '0.78',
  MAX_CONTEXT_TOKENS: '4000',
  DEFAULT_SEARCH_LIMIT: '20',
  
  // Gap Detection Settings
  CONFIDENCE_THRESHOLD: '0.60',
  AUTO_ESCALATION_THRESHOLD: '0.30',
  
  // Knowledge Update Settings
  CONTENT_GENERATION_MODEL: 'gpt-4o-mini',
  EMBEDDING_MODEL: 'text-embedding-3-small'
};

// Secrets que precisam ser configurados manualmente
const MANUAL_SECRETS = [
  'OPENAI_API_KEY',
  'GOOGLE_AI_API_KEY', 
  'ANTHROPIC_API_KEY',
  'GROQ_API_TOKEN',
  'DEEPSEEK_API_KEY',
  'LLAMA_API_KEY'
];

class EnvironmentSetup {
  constructor() {
    this.setupLog = [];
  }

  log(message, type = 'info') {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] [${type.toUpperCase()}] ${message}`;
    console.log(logEntry);
    this.setupLog.push(logEntry);
  }

  async checkSupabaseCLI() {
    this.log('üîç Verificando Supabase CLI...');
    
    try {
      const version = execSync('npx supabase --version', { encoding: 'utf8' }).trim();
      this.log(`‚úÖ Supabase CLI encontrado: ${version}`);
      return true;
    } catch (error) {
      this.log('‚ùå Supabase CLI n√£o encontrado', 'error');
      this.log('üí° Instale com: npm install -g supabase', 'info');
      return false;
    }
  }

  async setupSupabaseLogin() {
    this.log('üîê Configurando login do Supabase...');
    
    try {
      // Verificar se j√° est√° logado
      execSync('npx supabase projects list', { stdio: 'pipe' });
      this.log('‚úÖ J√° logado no Supabase');
      return true;
    } catch (error) {
      this.log('‚ö†Ô∏è N√£o logado no Supabase', 'warn');
      this.log('üí° Execute manualmente: npx supabase login', 'info');
      this.log('üí° Ou configure SUPABASE_ACCESS_TOKEN nas vari√°veis de ambiente', 'info');
      return false;
    }
  }

  async createEnvFiles() {
    this.log('üìÑ Criando arquivos de ambiente...');
    
    // Carregar .env.local existente se houver
    const existingEnvPath = '.env.local';
    let existingEnv = {};
    
    if (fs.existsSync(existingEnvPath)) {
      this.log('üìñ Carregando .env.local existente...');
      const envContent = fs.readFileSync(existingEnvPath, 'utf8');
      
      envContent.split('\n').forEach(line => {
        const [key, ...valueParts] = line.split('=');
        if (key && valueParts.length > 0) {
          existingEnv[key.trim()] = valueParts.join('=').trim();
        }
      });
    }

    // Merge com template, preservando valores existentes
    const finalEnv = { ...ENV_TEMPLATE, ...existingEnv };
    
    // Gerar conte√∫do do arquivo
    let envContent = '# Edge Functions Environment Configuration\n';
    envContent += '# Generated by setup-environment.mjs\n';
    envContent += `# Generated at: ${new Date().toISOString()}\n\n`;
    
    envContent += '# Supabase Configuration\n';
    envContent += `SUPABASE_URL=${finalEnv.SUPABASE_URL}\n`;
    envContent += `SUPABASE_ANON_KEY=${finalEnv.SUPABASE_ANON_KEY}\n`;
    envContent += `SUPABASE_SERVICE_ROLE_KEY=${finalEnv.SUPABASE_SERVICE_ROLE_KEY}\n\n`;
    
    envContent += '# AI API Keys (Configure manualmente)\n';
    MANUAL_SECRETS.forEach(secret => {
      const value = finalEnv[secret] || 'CONFIGURE_MANUALLY';
      envContent += `${secret}=${value}\n`;
    });
    envContent += '\n';
    
    envContent += '# Application Settings\n';
    Object.entries(finalEnv).forEach(([key, value]) => {
      if (!key.startsWith('SUPABASE_') && !MANUAL_SECRETS.includes(key)) {
        envContent += `${key}=${value}\n`;
      }
    });
    
    // Salvar arquivo
    fs.writeFileSync(existingEnvPath, envContent);
    this.log(`‚úÖ Arquivo ${existingEnvPath} criado/atualizado`);
    
    // Criar arquivo de exemplo
    const examplePath = '.env.example';
    const exampleContent = envContent.replace(/=.*/g, '=YOUR_VALUE_HERE');
    fs.writeFileSync(examplePath, exampleContent);
    this.log(`‚úÖ Arquivo ${examplePath} criado`);
    
    return { envPath: existingEnvPath, examplePath };
  }

  async setupSupabaseSecrets() {
    this.log('üîê Configurando secrets no Supabase...');
    
    const secrets = [
      'OPENAI_API_KEY',
      'GOOGLE_AI_API_KEY',
      'ANTHROPIC_API_KEY',
      'GROQ_API_TOKEN',
      'DEEPSEEK_API_KEY'
    ];
    
    let configuredSecrets = 0;
    
    for (const secret of secrets) {
      try {
        const value = process.env[secret];
        if (value && value !== 'CONFIGURE_MANUALLY' && !value.includes('XXXXX')) {
          const command = `npx supabase secrets set ${secret}="${value}" --project-ref ${PROJECT_REF}`;
          execSync(command, { stdio: 'pipe' });
          this.log(`‚úÖ Secret ${secret} configurado`);
          configuredSecrets++;
        } else {
          this.log(`‚ö†Ô∏è Secret ${secret} n√£o configurado (valor vazio ou placeholder)`, 'warn');
        }
      } catch (error) {
        this.log(`‚ùå Erro ao configurar secret ${secret}: ${error.message}`, 'error');
      }
    }
    
    this.log(`üìä ${configuredSecrets}/${secrets.length} secrets configurados`);
    return configuredSecrets;
  }

  async updateSupabaseConfig() {
    this.log('‚öôÔ∏è Atualizando supabase/config.toml...');
    
    const configPath = 'supabase/config.toml';
    
    if (!fs.existsSync(configPath)) {
      this.log('‚ùå config.toml n√£o encontrado', 'error');
      return false;
    }
    
    let configContent = fs.readFileSync(configPath, 'utf8');
    
    // Functions que precisam de configura√ß√µes espec√≠ficas
    const functionConfigs = {
      'feedback-processor': { verify_jwt: true },
      'gap-detector': { verify_jwt: false },
      'knowledge-updater': { verify_jwt: true },
      'paginated-search': { verify_jwt: true },
      'cursor-pagination': { verify_jwt: true },
      'enhanced-vector-search': { verify_jwt: true },
      'response-synthesizer': { verify_jwt: true },
      'contextual-scoring': { verify_jwt: true }
    };
    
    // Adicionar configura√ß√µes das functions se n√£o existirem
    Object.entries(functionConfigs).forEach(([funcName, config]) => {
      const configSection = `[functions.${funcName}]`;
      
      if (!configContent.includes(configSection)) {
        configContent += `\n${configSection}\n`;
        configContent += `verify_jwt = ${config.verify_jwt}\n`;
        this.log(`‚úÖ Adicionada configura√ß√£o para ${funcName}`);
      }
    });
    
    fs.writeFileSync(configPath, configContent);
    this.log('‚úÖ config.toml atualizado');
    
    return true;
  }

  async validateEnvironment() {
    this.log('üîç Validando ambiente...');
    
    const errors = [];
    const warnings = [];
    
    // Verificar vari√°veis essenciais
    const essentialVars = ['SUPABASE_URL', 'SUPABASE_SERVICE_ROLE_KEY', 'OPENAI_API_KEY'];
    essentialVars.forEach(varName => {
      const value = process.env[varName];
      if (!value || value === 'CONFIGURE_MANUALLY' || value.includes('XXXXX')) {
        errors.push(`${varName} n√£o configurado`);
      }
    });
    
    // Verificar vari√°veis opcionais
    const optionalVars = ['GOOGLE_AI_API_KEY', 'ANTHROPIC_API_KEY', 'GROQ_API_TOKEN'];
    optionalVars.forEach(varName => {
      const value = process.env[varName];
      if (!value || value === 'CONFIGURE_MANUALLY' || value.includes('XXXXX')) {
        warnings.push(`${varName} n√£o configurado (algumas functions podem n√£o funcionar)`);
      }
    });
    
    // Verificar estrutura de diret√≥rios
    const requiredDirs = ['supabase/functions', 'supabase/functions/shared'];
    requiredDirs.forEach(dir => {
      if (!fs.existsSync(dir)) {
        errors.push(`Diret√≥rio ${dir} n√£o encontrado`);
      }
    });
    
    // Log resultados
    if (errors.length > 0) {
      this.log('‚ùå Erros encontrados:', 'error');
      errors.forEach(error => this.log(`  - ${error}`, 'error'));
    }
    
    if (warnings.length > 0) {
      this.log('‚ö†Ô∏è Avisos:', 'warn');
      warnings.forEach(warning => this.log(`  - ${warning}`, 'warn'));
    }
    
    if (errors.length === 0 && warnings.length === 0) {
      this.log('‚úÖ Ambiente validado com sucesso');
    }
    
    return { errors, warnings };
  }

  async generateSetupInstructions() {
    const instructions = `
# Instru√ß√µes de Setup - Edge Functions

## 1. Configura√ß√£o de API Keys

Configure as seguintes API keys no arquivo .env.local:

### OpenAI (Obrigat√≥rio)
- Acesse: https://platform.openai.com/api-keys
- Crie uma nova API key
- Adicione: OPENAI_API_KEY=sk-proj-...

### Google AI/Gemini (Opcional)
- Acesse: https://aistudio.google.com/app/apikey  
- Crie uma API key
- Adicione: GOOGLE_AI_API_KEY=...

### Anthropic/Claude (Opcional)
- Acesse: https://console.anthropic.com/
- Crie uma API key
- Adicione: ANTHROPIC_API_KEY=...

### Groq (Opcional)
- Acesse: https://console.groq.com/keys
- Crie uma API key
- Adicione: GROQ_API_TOKEN=...

### DeepSeek (Opcional)
- Acesse: https://platform.deepseek.ai/
- Crie uma API key
- Adicione: DEEPSEEK_API_KEY=...

## 2. Deploy das Functions

Ap√≥s configurar as API keys, execute:

\`\`\`bash
# Deploy completo
node deploy-all-functions.mjs

# Ou deploy por categoria
node deploy-all-functions.mjs --category critical
node deploy-all-functions.mjs --category multiLLM
\`\`\`

## 3. Verifica√ß√£o

Teste as functions deployadas:

\`\`\`bash
# Testar function espec√≠fica
curl -X OPTIONS https://${PROJECT_REF}.supabase.co/functions/v1/feedback-processor

# Verificar logs
npx supabase functions logs feedback-processor --project-ref ${PROJECT_REF}
\`\`\`

## 4. Monitoramento

- Dashboard Supabase: https://supabase.com/dashboard/project/${PROJECT_REF}
- Functions: https://supabase.com/dashboard/project/${PROJECT_REF}/functions
- Logs: https://supabase.com/dashboard/project/${PROJECT_REF}/logs

## 5. Solu√ß√£o de Problemas

### Function n√£o responde
1. Verificar logs: \`npx supabase functions logs <function-name>\`
2. Verificar API keys configuradas
3. Verificar timeout (aumentar se necess√°rio)

### Erro de CORS
- Verificar se function retorna headers CORS corretos
- Testar com OPTIONS request primeiro

### Erro de autentica√ß√£o
- Verificar JWT configuration no config.toml
- Verificar se token est√° sendo enviado corretamente
`;

    fs.writeFileSync('SETUP_INSTRUCTIONS.md', instructions);
    this.log('‚úÖ Instru√ß√µes salvas em SETUP_INSTRUCTIONS.md');
    
    return instructions;
  }

  printSummary() {
    console.log('\n' + '='.repeat(60));
    console.log('üìã RESUMO DO SETUP');
    console.log('='.repeat(60));
    
    console.log('‚úÖ Arquivos criados:');
    console.log('  - .env.local (configura√ß√£o de ambiente)');
    console.log('  - .env.example (exemplo para outros desenvolvedores)');
    console.log('  - SETUP_INSTRUCTIONS.md (instru√ß√µes detalhadas)');
    
    console.log('\nüîß Pr√≥ximos passos:');
    console.log('  1. Configure as API keys em .env.local');
    console.log('  2. Execute: npx supabase login');
    console.log('  3. Execute: node deploy-all-functions.mjs');
    
    console.log('\n‚ö†Ô∏è Importante:');
    console.log('  - Nunca commite .env.local no git');
    console.log('  - Configure as API keys manualmente');
    console.log('  - Teste as functions ap√≥s o deploy');
    
    console.log('='.repeat(60));
  }
}

async function main() {
  console.log('üõ†Ô∏è Setup de Ambiente - Edge Functions');
  console.log(`üìç Projeto: ${PROJECT_REF}\n`);

  const setup = new EnvironmentSetup();
  
  try {
    // 1. Verificar Supabase CLI
    await setup.checkSupabaseCLI();
    
    // 2. Verificar login
    await setup.setupSupabaseLogin();
    
    // 3. Criar arquivos de ambiente
    await setup.createEnvFiles();
    
    // 4. Atualizar config do Supabase
    await setup.updateSupabaseConfig();
    
    // 5. Gerar instru√ß√µes
    await setup.generateSetupInstructions();
    
    // 6. Validar ambiente
    const validation = await setup.validateEnvironment();
    
    // 7. Mostrar resumo
    setup.printSummary();
    
    if (validation.errors.length > 0) {
      console.log('\n‚ùå Configura√ß√£o incompleta. Verifique os erros acima.');
      process.exit(1);
    }
    
  } catch (error) {
    setup.log(`üí• Erro no setup: ${error.message}`, 'error');
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (process.argv[1] === new URL(import.meta.url).pathname) {
  main().catch(error => {
    console.error('üí• Erro n√£o tratado:', error);
    process.exit(1);
  });
}

export { EnvironmentSetup, ENV_TEMPLATE, MANUAL_SECRETS };