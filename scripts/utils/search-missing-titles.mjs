#!/usr/bin/env node
/**
 * Buscar pelos t√≠tulos faltantes VII e IX
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config({ path: '.env' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function searchMissingTitles() {
  console.log('üîç BUSCANDO T√çTULOS FALTANTES\n');
  
  // 1. Buscar T√≠tulo VII - Penalidades
  console.log('üìö Buscando T√≠tulo VII - Das Penalidades:');
  
  const searchTermsVII = [
    'T√çTULO VII',
    'T√≠tulo VII',
    'penalidades',
    'san√ß√µes',
    'multas',
    'infra√ß√µes'
  ];
  
  for (const term of searchTermsVII) {
    const { data, count } = await supabase
      .from('legal_articles')
      .select('article_number, full_content', { count: 'exact' })
      .eq('document_type', 'LUOS')
      .ilike('full_content', `%${term}%`)
      .limit(3);
    
    if (count > 0) {
      console.log(`  ‚úÖ Encontrado "${term}": ${count} resultados`);
      if (data[0]) {
        console.log(`     Exemplo: Art#${data[0].article_number}`);
        console.log(`     ${data[0].full_content?.substring(0, 100)}...`);
      }
    }
  }
  
  // 2. Buscar T√≠tulo IX - Disposi√ß√µes Gerais e Complementares
  console.log('\nüìö Buscando T√≠tulo IX - Das Disposi√ß√µes Gerais e Complementares:');
  
  const searchTermsIX = [
    'T√çTULO IX',
    'T√≠tulo IX',
    'disposi√ß√µes gerais',
    'disposi√ß√µes complementares',
    'complementares'
  ];
  
  for (const term of searchTermsIX) {
    const { data, count } = await supabase
      .from('legal_articles')
      .select('article_number, full_content', { count: 'exact' })
      .eq('document_type', 'LUOS')
      .ilike('full_content', `%${term}%`)
      .limit(3);
    
    if (count > 0) {
      console.log(`  ‚úÖ Encontrado "${term}": ${count} resultados`);
      if (data[0]) {
        console.log(`     Exemplo: Art#${data[0].article_number}`);
        console.log(`     ${data[0].full_content?.substring(0, 100)}...`);
      }
    }
  }
  
  // 3. Listar TODOS os t√≠tulos que existem na base
  console.log('\nüìã TODOS OS T√çTULOS EXISTENTES NA BASE:');
  
  const { data: allTitles } = await supabase
    .from('legal_articles')
    .select('article_number, full_content')
    .eq('document_type', 'LUOS')
    .gte('article_number', 9000)
    .order('article_number');
  
  const foundTitles = [];
  allTitles?.forEach(t => {
    const match = t.full_content?.match(/T√çTULO\s+([IVX]+|[0-9]+)/);
    if (match && !foundTitles.includes(match[0])) {
      foundTitles.push(match[0]);
      console.log(`  - ${match[0]} (Art#${t.article_number})`);
    }
  });
  
  // 4. Verificar a estrutura real da LUOS
  console.log('\nüìä AN√ÅLISE DA ESTRUTURA REAL:');
  console.log('  T√≠tulos encontrados na base:', foundTitles.length);
  console.log('  Lista:', foundTitles.join(', '));
  
  // 5. Verificar se os t√≠tulos VII e IX realmente existem na LUOS original
  console.log('\nüí° CONCLUS√ÉO:');
  if (!foundTitles.includes('T√çTULO VII')) {
    console.log('  ‚ö†Ô∏è T√≠tulo VII n√£o encontrado - pode n√£o existir na LUOS');
  }
  if (!foundTitles.includes('T√çTULO IX')) {
    console.log('  ‚ö†Ô∏è T√≠tulo IX n√£o encontrado - pode n√£o existir na LUOS');
  }
  
  console.log('\nüìù NOTA: A LUOS de Porto Alegre pode ter apenas os t√≠tulos:');
  console.log('  I, II, III, IV, V, VI, VIII e X');
  console.log('  (T√≠tulos VII e IX podem n√£o existir no documento original)');
}

searchMissingTitles().catch(console.error);