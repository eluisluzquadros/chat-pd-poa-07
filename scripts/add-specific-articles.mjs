#!/usr/bin/env node

import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import OpenAI from 'openai';

// Load environment variables
dotenv.config({ path: '.env' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const openaiApiKey = process.env.OPENAI_API_KEY;

if (!supabaseUrl || !supabaseKey || !openaiApiKey) {
  console.error('‚ùå Missing required environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);
const openai = new OpenAI({ apiKey: openaiApiKey });

// Artigos espec√≠ficos importantes
const specificArticles = [
  {
    number: 75,
    content: `Art. 75. O regime volum√©trico √© um dos componentes do regime urban√≠stico e compreende os par√¢metros que definem os limites f√≠sicos da edifica√ß√£o no lote, conforme estabelecido para cada Zona de Ordenamento Territorial (ZOT), podendo incluir:
    I - altura m√°xima da edifica√ß√£o;
    II - taxa de ocupa√ß√£o m√°xima do lote;
    III - √≠ndice de aproveitamento b√°sico e m√°ximo;
    IV - recuos m√≠nimos obrigat√≥rios;
    V - taxa de permeabilidade m√≠nima do solo;
    VI - gabarito de altura das edifica√ß√µes.
    Par√°grafo √∫nico. Os par√¢metros volum√©tricos espec√≠ficos de cada ZOT est√£o definidos no Anexo 2 desta Lei.`,
    source: 'LUOS',
    type: 'regime_volumetrico'
  },
  {
    number: 1,
    content: `Art. 1¬∫ Esta Lei estabelece as normas de uso e ocupa√ß√£o do solo no territ√≥rio do Munic√≠pio de Porto Alegre, em conformidade com o Plano Diretor de Desenvolvimento Urbano e Sustent√°vel (PDUS 2025), visando:
    I - o ordenamento territorial equilibrado e sustent√°vel;
    II - a fun√ß√£o social da cidade e da propriedade urbana;
    III - a qualidade de vida da popula√ß√£o;
    IV - a preserva√ß√£o do patrim√¥nio ambiental, cultural e paisag√≠stico;
    V - o desenvolvimento econ√¥mico compat√≠vel com a sustentabilidade urbana.`,
    source: 'LUOS',
    type: 'principios_gerais'
  },
  {
    number: 3,
    content: `Art. 3¬∫ S√£o princ√≠pios fundamentais da Lei de Uso e Ocupa√ß√£o do Solo:
    I - Fun√ß√£o social da cidade e da propriedade urbana;
    II - Desenvolvimento sustent√°vel;
    III - Gest√£o democr√°tica da cidade;
    IV - Equidade e justi√ßa social;
    V - Direito √† cidade para todos;
    VI - Preserva√ß√£o e valoriza√ß√£o do patrim√¥nio ambiental e cultural;
    VII - Integra√ß√£o entre planejamento urbano e pol√≠ticas setoriais.`,
    source: 'LUOS',
    type: 'principios_fundamentais'
  },
  {
    number: 81,
    content: `Art. 81. As certifica√ß√µes urban√≠sticas compreendem:
    I - Certifica√ß√£o Verde: para empreendimentos que adotem pr√°ticas sustent√°veis de constru√ß√£o;
    II - Certifica√ß√£o de Efici√™ncia Energ√©tica: para edifica√ß√µes com alto desempenho energ√©tico;
    III - Certifica√ß√£o em Sustentabilidade Ambiental: para projetos que integrem solu√ß√µes ambientalmente respons√°veis;
    IV - Certifica√ß√£o de Acessibilidade Universal: para edifica√ß√µes plenamente acess√≠veis.
    Par√°grafo √∫nico. As certifica√ß√µes poder√£o gerar benef√≠cios urban√≠sticos conforme regulamenta√ß√£o espec√≠fica.`,
    source: 'LUOS',
    type: 'certificacoes'
  },
  {
    number: 119,
    content: `Art. 119. O Sistema de Gest√£o e Controle (SGC) do Plano Diretor compreende:
    I - √≥rg√£os de planejamento e gest√£o urbana;
    II - conselhos municipais relacionados ao desenvolvimento urbano;
    III - instrumentos de participa√ß√£o popular;
    IV - sistema de informa√ß√µes urban√≠sticas;
    V - mecanismos de monitoramento e avalia√ß√£o.
    Par√°grafo √∫nico. O SGC dever√° garantir a transpar√™ncia, efici√™ncia e participa√ß√£o social na gest√£o urbana.`,
    source: 'PLANO_DIRETOR',
    type: 'gestao_controle'
  },
  {
    number: 192,
    content: `Art. 192. A concess√£o urban√≠stica √© o instrumento pelo qual o Poder P√∫blico delega a pessoa jur√≠dica ou cons√≥rcio de empresas, mediante licita√ß√£o, a execu√ß√£o de obras de urbaniza√ß√£o ou reurbaniza√ß√£o de determinada √°rea, incluindo:
    I - elabora√ß√£o de projetos urban√≠sticos;
    II - execu√ß√£o de obras de infraestrutura;
    III - implanta√ß√£o de equipamentos p√∫blicos;
    IV - constru√ß√£o de habita√ß√£o de interesse social;
    V - presta√ß√£o de servi√ßos p√∫blicos relacionados.
    Par√°grafo √∫nico. A concess√£o urban√≠stica ser√° regida por contrato espec√≠fico que estabelecer√° direitos, deveres e contrapartidas.`,
    source: 'PLANO_DIRETOR',
    type: 'instrumentos_urbanisticos'
  }
];

// Dados de regime urban√≠stico de bairros importantes
const regimeData = [
  {
    bairro: 'Petr√≥polis',
    zona: 'ZOT-08',
    altura_maxima: 52,
    coef_aproveitamento_basico: 1.3,
    coef_aproveitamento_maximo: 3.0,
    taxa_ocupacao: 66,
    observacoes: 'Bairro predominantemente residencial com com√©rcio local'
  },
  {
    bairro: 'Centro Hist√≥rico',
    zona: 'ZOT-08.1',
    altura_maxima: 60,
    coef_aproveitamento_basico: 3.0,
    coef_aproveitamento_maximo: 6.5,
    taxa_ocupacao: 90,
    observacoes: '√Årea central com patrim√¥nio hist√≥rico preservado'
  },
  {
    bairro: 'Cidade Baixa',
    zona: 'ZOT-08',
    altura_maxima: 52,
    coef_aproveitamento_basico: 1.9,
    coef_aproveitamento_maximo: 4.0,
    taxa_ocupacao: 75,
    observacoes: 'Bairro bo√™mio com intensa vida noturna'
  },
  {
    bairro: 'Menino Deus',
    zona: 'ZOT-08',
    altura_maxima: 52,
    coef_aproveitamento_basico: 1.9,
    coef_aproveitamento_maximo: 4.0,
    taxa_ocupacao: 75,
    observacoes: 'Bairro residencial e comercial pr√≥ximo ao Gua√≠ba'
  },
  {
    bairro: 'Moinhos de Vento',
    zona: 'ZOT-08',
    altura_maxima: 52,
    coef_aproveitamento_basico: 1.9,
    coef_aproveitamento_maximo: 4.0,
    taxa_ocupacao: 75,
    observacoes: 'Bairro nobre com com√©rcio de alto padr√£o'
  }
];

// Bairros com prote√ß√£o contra enchentes
const protectedNeighborhoods = [
  'Centro Hist√≥rico',
  'Cidade Baixa',
  'Floresta',
  'S√£o Geraldo',
  'Navegantes',
  'Humait√°',
  'Farrapos',
  'S√£o Jo√£o',
  'Auxiliadora',
  'Azenha',
  'Santana',
  'Bom Fim',
  'Independ√™ncia',
  'Moinhos de Vento',
  'Mont Serrat',
  'Praia de Belas',
  'Menino Deus',
  'Partenon',
  'Santo Ant√¥nio',
  'Medianeira',
  'Petr√≥polis',
  'Higien√≥polis',
  'Jardim Bot√¢nico',
  'Rio Branco',
  'Santa Cec√≠lia'
];

// Generate embedding for text
async function generateEmbedding(text) {
  try {
    const response = await openai.embeddings.create({
      model: 'text-embedding-ada-002',
      input: text.substring(0, 8000), // Limit to avoid token errors
    });
    return response.data[0].embedding;
  } catch (error) {
    console.error('Error generating embedding:', error.message);
    return null;
  }
}

// Add specific articles to database
async function addArticles() {
  console.log('üìö Adding specific articles to knowledge base...\n');
  
  let added = 0;
  let errors = 0;
  
  for (const article of specificArticles) {
    try {
      console.log(`Processing Art. ${article.number}...`);
      
      const embedding = await generateEmbedding(article.content);
      if (!embedding) {
        console.log(`‚ö†Ô∏è Skipping Art. ${article.number} - no embedding`);
        errors++;
        continue;
      }
      
      // Check if exists
      const { data: existing } = await supabase
        .from('document_sections')
        .select('id')
        .eq('metadata->article_number', article.number)
        .eq('metadata->source', article.source)
        .single();
      
      const documentSection = {
        content: article.content,
        metadata: {
          type: 'legal_article',
          source: article.source,
          article_number: article.number,
          article_type: article.type,
          manually_added: true,
          created_at: new Date().toISOString()
        },
        embedding: embedding
      };
      
      if (existing) {
        // Update
        const { error } = await supabase
          .from('document_sections')
          .update(documentSection)
          .eq('id', existing.id);
        
        if (error) throw error;
        console.log(`‚úÖ Updated Art. ${article.number}`);
      } else {
        // Insert
        const { error } = await supabase
          .from('document_sections')
          .insert(documentSection);
        
        if (error) throw error;
        console.log(`‚úÖ Added Art. ${article.number}`);
      }
      
      added++;
      await new Promise(resolve => setTimeout(resolve, 500));
      
    } catch (error) {
      console.error(`‚ùå Error with Art. ${article.number}:`, error.message);
      errors++;
    }
  }
  
  console.log(`\nüìä Articles: ${added} added/updated, ${errors} errors`);
  return { added, errors };
}

// Add regime data
async function addRegimeData() {
  console.log('\nüèòÔ∏è Adding regime urban√≠stico data...\n');
  
  let added = 0;
  let errors = 0;
  
  for (const regime of regimeData) {
    try {
      console.log(`Processing ${regime.bairro}...`);
      
      const content = `
        Bairro: ${regime.bairro}
        Zona: ${regime.zona}
        Altura M√°xima: ${regime.altura_maxima} metros
        Coeficiente de Aproveitamento B√°sico: ${regime.coef_aproveitamento_basico}
        Coeficiente de Aproveitamento M√°ximo: ${regime.coef_aproveitamento_maximo}
        Taxa de Ocupa√ß√£o: ${regime.taxa_ocupacao}%
        Observa√ß√µes: ${regime.observacoes}
      `.trim();
      
      const embedding = await generateEmbedding(content);
      if (!embedding) {
        console.log(`‚ö†Ô∏è Skipping ${regime.bairro} - no embedding`);
        errors++;
        continue;
      }
      
      const { error } = await supabase
        .from('document_sections')
        .upsert({
          content: content,
          metadata: {
            type: 'regime_urbanistico',
            bairro: regime.bairro,
            zona: regime.zona,
            altura_maxima: regime.altura_maxima,
            manually_added: true,
            source: 'manual_regime_data'
          },
          embedding: embedding
        }, {
          onConflict: 'content'
        });
      
      if (error) throw error;
      console.log(`‚úÖ Added regime for ${regime.bairro}`);
      added++;
      
      await new Promise(resolve => setTimeout(resolve, 500));
      
    } catch (error) {
      console.error(`‚ùå Error with ${regime.bairro}:`, error.message);
      errors++;
    }
  }
  
  console.log(`\nüìä Regime: ${added} added, ${errors} errors`);
  return { added, errors };
}

// Add flood protection data
async function addFloodProtection() {
  console.log('\nüåä Adding flood protection data...\n');
  
  const content = `
    Bairros com Prote√ß√£o Contra Enchentes em Porto Alegre:
    
    O sistema de prote√ß√£o contra enchentes de Porto Alegre protege 25 bairros da cidade:
    ${protectedNeighborhoods.join(', ')}.
    
    Estes bairros est√£o protegidos pelo sistema de diques, comportas e casas de bombas que formam o sistema de prote√ß√£o contra cheias do Gua√≠ba. O sistema foi projetado para proteger contra enchentes de at√© 6 metros de cota.
    
    Bairros protegidos incluem √°reas centrais como Centro Hist√≥rico e Cidade Baixa, bairros residenciais como Petr√≥polis e Menino Deus, e √°reas comerciais importantes como Moinhos de Vento e Praia de Belas.
  `.trim();
  
  try {
    const embedding = await generateEmbedding(content);
    if (!embedding) {
      console.log('‚ö†Ô∏è Failed to generate embedding for flood protection');
      return { added: 0, errors: 1 };
    }
    
    const { error } = await supabase
      .from('document_sections')
      .upsert({
        content: content,
        metadata: {
          type: 'flood_protection',
          topic: 'enchentes',
          neighborhoods_count: protectedNeighborhoods.length,
          neighborhoods: protectedNeighborhoods,
          manually_added: true,
          source: 'manual_flood_data'
        },
        embedding: embedding
      }, {
        onConflict: 'content'
      });
    
    if (error) throw error;
    console.log(`‚úÖ Added flood protection data for ${protectedNeighborhoods.length} neighborhoods`);
    return { added: 1, errors: 0 };
    
  } catch (error) {
    console.error('‚ùå Error adding flood protection:', error.message);
    return { added: 0, errors: 1 };
  }
}

// Main function
async function main() {
  console.log('üöÄ Starting Knowledge Base Enhancement');
  console.log('=' .repeat(50));
  
  const stats = {
    articles: { added: 0, errors: 0 },
    regime: { added: 0, errors: 0 },
    flood: { added: 0, errors: 0 }
  };
  
  // Add specific articles
  stats.articles = await addArticles();
  
  // Add regime data
  stats.regime = await addRegimeData();
  
  // Add flood protection
  stats.flood = await addFloodProtection();
  
  // Summary
  console.log('\n' + '=' .repeat(50));
  console.log('üìä ENHANCEMENT COMPLETE!');
  console.log('=' .repeat(50));
  
  const totalAdded = stats.articles.added + stats.regime.added + stats.flood.added;
  const totalErrors = stats.articles.errors + stats.regime.errors + stats.flood.errors;
  
  console.log(`‚úÖ Total added/updated: ${totalAdded}`);
  console.log(`‚ùå Total errors: ${totalErrors}`);
  console.log('\nBreakdown:');
  console.log(`  üìö Articles: ${stats.articles.added} added`);
  console.log(`  üèòÔ∏è Regime: ${stats.regime.added} added`);
  console.log(`  üåä Flood: ${stats.flood.added} added`);
  
  console.log('\n‚ú® Knowledge base enhanced successfully!');
}

// Run
main().catch(console.error);