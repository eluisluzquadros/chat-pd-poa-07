üìã MIGRATIONS PARA APLICAR NO SUPABASE SQL EDITOR
================================================

üìç Acesse: https://supabase.com/dashboard/project/ngrqwmvuhvjkeohesbxs/sql


================================================================================
MIGRATION 1: 20250205_fix_qa_test_cases_permissions.sql
================================================================================
-- Fix qa_test_cases table structure and permissions
-- This migration ensures the qa_test_cases table has the correct structure and RLS policies

-- First, ensure the table has all required columns
ALTER TABLE qa_test_cases 
ADD COLUMN IF NOT EXISTS query TEXT,
ADD COLUMN IF NOT EXISTS question TEXT,
ADD COLUMN IF NOT EXISTS expected_answer TEXT,
ADD COLUMN IF NOT EXISTS expected_sql TEXT,
ADD COLUMN IF NOT EXISTS tags TEXT[],
ADD COLUMN IF NOT EXISTS is_sql_related BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS sql_complexity TEXT,
ADD COLUMN IF NOT EXISTS version INTEGER DEFAULT 1;

-- Update query column from question if query is empty
UPDATE qa_test_cases 
SET query = question 
WHERE query IS NULL AND question IS NOT NULL;

-- Enable RLS
ALTER TABLE qa_test_cases ENABLE ROW LEVEL SECURITY;

-- Drop existing policies to recreate them
DROP POLICY IF EXISTS "Enable read access for all authenticated users" ON qa_test_cases;
DROP POLICY IF EXISTS "Enable insert for authenticated users" ON qa_test_cases;
DROP POLICY IF EXISTS "Enable update for authenticated users" ON qa_test_cases;
DROP POLICY IF EXISTS "Enable delete for authenticated users" ON qa_test_cases;

-- Create policies that allow full CRUD operations for authenticated users
CREATE POLICY "Enable read access for all authenticated users" 
ON qa_test_cases FOR SELECT 
TO authenticated 
USING (true);

CREATE POLICY "Enable insert for authenticated users" 
ON qa_test_cases FOR INSERT 
TO authenticated 
WITH CHECK (true);

CREATE POLICY "Enable update for authenticated users" 
ON qa_test_cases FOR UPDATE 
TO authenticated 
USING (true)
WITH CHECK (true);

CREATE POLICY "Enable delete for authenticated users" 
ON qa_test_cases FOR DELETE 
TO authenticated 
USING (true);

-- Also allow anon users to read (for public API access)
CREATE POLICY "Enable read access for anon users" 
ON qa_test_cases FOR SELECT 
TO anon 
USING (true);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_qa_test_cases_category ON qa_test_cases(category);
CREATE INDEX IF NOT EXISTS idx_qa_test_cases_is_active ON qa_test_cases(is_active);
CREATE INDEX IF NOT EXISTS idx_qa_test_cases_test_id ON qa_test_cases(test_id);

-- Grant necessary permissions
GRANT ALL ON qa_test_cases TO authenticated;
GRANT SELECT ON qa_test_cases TO anon;

-- FIM DA MIGRATION 1 --


================================================================================
MIGRATION 2: 20250205_fix_chat_permissions.sql
================================================================================
-- Fix chat_sessions and chat_history permissions
-- This migration ensures proper RLS policies for chat tables

-- Enable RLS on chat tables
ALTER TABLE chat_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE chat_history ENABLE ROW LEVEL SECURITY;

-- Drop existing policies to recreate them
DROP POLICY IF EXISTS "Users can view own chat sessions" ON chat_sessions;
DROP POLICY IF EXISTS "Users can create own chat sessions" ON chat_sessions;
DROP POLICY IF EXISTS "Users can update own chat sessions" ON chat_sessions;
DROP POLICY IF EXISTS "Users can delete own chat sessions" ON chat_sessions;

DROP POLICY IF EXISTS "Users can view own chat history" ON chat_history;
DROP POLICY IF EXISTS "Users can create own chat history" ON chat_history;
DROP POLICY IF EXISTS "Users can update own chat history" ON chat_history;
DROP POLICY IF EXISTS "Users can delete own chat history" ON chat_history;

-- Create policies for chat_sessions
CREATE POLICY "Users can view own chat sessions" 
ON chat_sessions FOR SELECT 
TO authenticated 
USING (auth.uid() = user_id);

CREATE POLICY "Users can create own chat sessions" 
ON chat_sessions FOR INSERT 
TO authenticated 
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own chat sessions" 
ON chat_sessions FOR UPDATE 
TO authenticated 
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own chat sessions" 
ON chat_sessions FOR DELETE 
TO authenticated 
USING (auth.uid() = user_id);

-- Create policies for chat_history
CREATE POLICY "Users can view own chat history" 
ON chat_history FOR SELECT 
TO authenticated 
USING (
  EXISTS (
    SELECT 1 FROM chat_sessions 
    WHERE chat_sessions.id = chat_history.session_id 
    AND chat_sessions.user_id = auth.uid()
  )
);

CREATE POLICY "Users can create own chat history" 
ON chat_history FOR INSERT 
TO authenticated 
WITH CHECK (
  EXISTS (
    SELECT 1 FROM chat_sessions 
    WHERE chat_sessions.id = chat_history.session_id 
    AND chat_sessions.user_id = auth.uid()
  )
);

CREATE POLICY "Users can update own chat history" 
ON chat_history FOR UPDATE 
TO authenticated 
USING (
  EXISTS (
    SELECT 1 FROM chat_sessions 
    WHERE chat_sessions.id = chat_history.session_id 
    AND chat_sessions.user_id = auth.uid()
  )
)
WITH CHECK (
  EXISTS (
    SELECT 1 FROM chat_sessions 
    WHERE chat_sessions.id = chat_history.session_id 
    AND chat_sessions.user_id = auth.uid()
  )
);

CREATE POLICY "Users can delete own chat history" 
ON chat_history FOR DELETE 
TO authenticated 
USING (
  EXISTS (
    SELECT 1 FROM chat_sessions 
    WHERE chat_sessions.id = chat_history.session_id 
    AND chat_sessions.user_id = auth.uid()
  )
);

-- Grant necessary permissions
GRANT ALL ON chat_sessions TO authenticated;
GRANT ALL ON chat_history TO authenticated;

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_chat_sessions_user_id ON chat_sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_chat_history_session_id ON chat_history(session_id);
CREATE INDEX IF NOT EXISTS idx_chat_sessions_updated_at ON chat_sessions(updated_at DESC);

-- FIM DA MIGRATION 2 --


================================================================================
MIGRATION 3: 20250205_fix_qa_benchmarks_permissions.sql
================================================================================
-- Fix qa_benchmarks permissions to allow authenticated users to save benchmark results
-- This migration updates RLS policies for better user access

-- Drop existing restrictive policies
DROP POLICY IF EXISTS "Admins can manage benchmarks" ON qa_benchmarks;
DROP POLICY IF EXISTS "Anyone can view benchmarks" ON qa_benchmarks;

-- Create new policies for authenticated users
CREATE POLICY "Authenticated users can view benchmarks" 
ON qa_benchmarks FOR SELECT 
TO authenticated 
USING (true);

CREATE POLICY "Authenticated users can create benchmarks" 
ON qa_benchmarks FOR INSERT 
TO authenticated 
WITH CHECK (true);

CREATE POLICY "Authenticated users can update own benchmarks" 
ON qa_benchmarks FOR UPDATE 
TO authenticated 
USING (true)
WITH CHECK (true);

CREATE POLICY "Authenticated users can delete own benchmarks" 
ON qa_benchmarks FOR DELETE 
TO authenticated 
USING (true);

-- Grant necessary permissions
GRANT ALL ON qa_benchmarks TO authenticated;

-- Create user_id column if it doesn't exist to track ownership
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'qa_benchmarks' 
        AND column_name = 'user_id'
    ) THEN
        ALTER TABLE qa_benchmarks 
        ADD COLUMN user_id UUID REFERENCES auth.users(id) DEFAULT auth.uid();
        
        -- Update existing records to set user_id
        UPDATE qa_benchmarks 
        SET user_id = auth.uid() 
        WHERE user_id IS NULL;
        
        -- Create index for better performance
        CREATE INDEX idx_qa_benchmarks_user_id ON qa_benchmarks(user_id);
    END IF;
END $$;

-- Update policies to use user_id for better security
DROP POLICY IF EXISTS "Authenticated users can update own benchmarks" ON qa_benchmarks;
DROP POLICY IF EXISTS "Authenticated users can delete own benchmarks" ON qa_benchmarks;

CREATE POLICY "Authenticated users can update own benchmarks" 
ON qa_benchmarks FOR UPDATE 
TO authenticated 
USING (user_id = auth.uid() OR user_id IS NULL)
WITH CHECK (user_id = auth.uid() OR user_id IS NULL);

CREATE POLICY "Authenticated users can delete own benchmarks" 
ON qa_benchmarks FOR DELETE 
TO authenticated 
USING (user_id = auth.uid() OR user_id IS NULL);

-- Add comment
COMMENT ON TABLE qa_benchmarks IS 'Stores benchmark results with user ownership for persistence';

-- FIM DA MIGRATION 3 --


üìù INSTRU√á√ïES DE APLICA√á√ÉO:
1. Copie cada migration acima
2. Cole no SQL Editor do Supabase
3. Execute cada uma separadamente
4. Verifique se n√£o h√° erros
5. Teste as funcionalidades ap√≥s aplicar todas as migrations

