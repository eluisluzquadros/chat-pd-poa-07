// Script URGENTE para limpar cache de queries gen√©ricas com Petr√≥polis
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://ngrqwmvuhvjkeohesbxs.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5ncnF3bXZ1aHZqa2VvaGVzYnhzIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzYwOTAxNywiZXhwIjoyMDY5MTg1MDE3fQ.7jVZP70RAjpfFPfehZt5Gr3vSxn8DZ3YyPJNjCwZXEo';

const supabase = createClient(supabaseUrl, supabaseKey);

async function fixPetropolisCache() {
  console.log('üö® FIX URGENTE - LIMPEZA DE CACHE COM PETR√ìPOLIS INCORRETO\n');
  
  // 1. Buscar todas as queries que mencionam Petr√≥polis mas N√ÉO deveriam
  console.log('1Ô∏è‚É£ Buscando entradas incorretas no cache...');
  
  const { data: cacheEntries, error: searchError } = await supabase
    .from('query_cache')
    .select('key, query, response, created_at')
    .ilike('response', '%petr√≥polis%')
    .not('query', 'ilike', '%petr√≥polis%')
    .not('query', 'ilike', '%petropolis%');
  
  if (searchError) {
    console.error('Erro ao buscar cache:', searchError);
    return;
  }
  
  console.log(`\nüìä Encontradas ${cacheEntries?.length || 0} entradas suspeitas:`);
  
  const problematicQueries = [];
  cacheEntries?.forEach(entry => {
    // Verificar se a query n√£o menciona Petr√≥polis mas a resposta sim
    const queryLower = entry.query.toLowerCase();
    const responseLower = entry.response.toLowerCase();
    
    if (!queryLower.includes('petr√≥polis') && 
        !queryLower.includes('petropolis') &&
        responseLower.includes('petr√≥polis')) {
      console.log(`\n‚ùå PROBLEMA: "${entry.query}"`);
      console.log(`   Criado em: ${entry.created_at}`);
      problematicQueries.push(entry.key);
      
      // Mostrar trecho da resposta com Petr√≥polis
      const start = responseLower.indexOf('petr√≥polis');
      if (start !== -1) {
        console.log(`   Resposta: "...${entry.response.substring(Math.max(0, start - 30), start + 50)}..."`);
      }
    }
  });
  
  // 2. Deletar entradas problem√°ticas
  if (problematicQueries.length > 0) {
    console.log(`\nüóëÔ∏è  Deletando ${problematicQueries.length} entradas problem√°ticas...`);
    
    const { error: deleteError } = await supabase
      .from('query_cache')
      .delete()
      .in('key', problematicQueries);
    
    if (deleteError) {
      console.error('‚ùå Erro ao deletar:', deleteError);
    } else {
      console.log('‚úÖ Cache limpo com sucesso!');
    }
  }
  
  // 3. Deletar tamb√©m queries gen√©ricas espec√≠ficas
  console.log('\n2Ô∏è‚É£ Limpando queries gen√©ricas conhecidas...');
  
  const genericQueries = [
    'altura m√°xima da constru√ß√£o dos pr√©dios em porto alegre',
    'como poder√° ser feito a flexibiliza√ßao de recuo de jardim?',
    'qual a altura m√°xima permitida?',
    'coeficiente de aproveitamento em porto alegre',
    'qual √© o coeficiente m√°ximo de aproveitamento?',
    'quais s√£o os coeficientes de aproveitamento b√°sico e m√°ximo no plano diretor?'
  ];
  
  for (const query of genericQueries) {
    const { error } = await supabase
      .from('query_cache')
      .delete()
      .ilike('query', query);
    
    if (!error) {
      console.log(`‚úÖ Limpo: "${query}"`);
    }
  }
  
  // 4. Testar uma query problem√°tica
  console.log('\n\n3Ô∏è‚É£ Testando query ap√≥s limpeza...');
  console.log('Query: "Altura m√°xima da constru√ß√£o dos pr√©dios em porto alegre"\n');
  
  const response = await fetch(`${supabaseUrl}/functions/v1/agentic-rag`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5ncnF3bXZ1aHZqa2VvaGVzYnhzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM2MDkwMTcsImV4cCI6MjA2OTE4NTAxN30.K3uyyzjyAQ17ohQGCUFx_RiMufblLyQzvxEZHakqKrg`,
      'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5ncnF3bXZ1aHZqa2VvaGVzYnhzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM2MDkwMTcsImV4cCI6MjA2OTE4NTAxN30.K3uyyzjyAQ17ohQGCUFx_RiMufblLyQzvxEZHakqKrg'
    },
    body: JSON.stringify({
      message: 'Altura m√°xima da constru√ß√£o dos pr√©dios em porto alegre',
      sessionId: `fix-test-${Date.now()}`,
      bypassCache: true
    })
  });
  
  const result = await response.json();
  const hasPetropolis = result.response?.toLowerCase().includes('petr√≥polis');
  
  console.log(`Cont√©m Petr√≥polis: ${hasPetropolis ? '‚ùå SIM (AINDA COM PROBLEMA)' : '‚úÖ N√ÉO (CORRIGIDO)'}`);
  
  if (!hasPetropolis) {
    console.log('\n‚úÖ SUCESSO! A query n√£o est√° mais retornando dados de Petr√≥polis.');
  } else {
    console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: O problema persiste. Necess√°rio investigar mais profundamente.');
  }
  
  console.log('\nüìã Recomenda√ß√£o: O problema principal √© que "porto alegre" est√° sendo detectado como nome de bairro.');
  console.log('   Solu√ß√£o: Modificar o query-analyzer para N√ÉO tratar "porto alegre" como bairro.');
}

fixPetropolisCache().catch(console.error);